/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * The description of table schema
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class TableSchema implements org.apache.thrift.TBase<TableSchema, TableSchema._Fields>, java.io.Serializable, Cloneable, Comparable<TableSchema> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TableSchema");

  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("table_columns", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SCHEMA_EVOLUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_evolution", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TABLE_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableProperties", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TableSchemaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TableSchemaTupleSchemeFactory());
  }

  public String table_id; // required
  public List<ColumnSchema> table_columns; // required
  public SchemaEvolution schema_evolution; // required
  public Map<String,String> tableProperties; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_ID((short)1, "table_id"),
    TABLE_COLUMNS((short)2, "table_columns"),
    SCHEMA_EVOLUTION((short)3, "schema_evolution"),
    TABLE_PROPERTIES((short)4, "tableProperties");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_ID
          return TABLE_ID;
        case 2: // TABLE_COLUMNS
          return TABLE_COLUMNS;
        case 3: // SCHEMA_EVOLUTION
          return SCHEMA_EVOLUTION;
        case 4: // TABLE_PROPERTIES
          return TABLE_PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TABLE_PROPERTIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("table_columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnSchema.class))));
    tmpMap.put(_Fields.SCHEMA_EVOLUTION, new org.apache.thrift.meta_data.FieldMetaData("schema_evolution", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SchemaEvolution.class)));
    tmpMap.put(_Fields.TABLE_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("tableProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TableSchema.class, metaDataMap);
  }

  public TableSchema() {
  }

  public TableSchema(
    String table_id,
    List<ColumnSchema> table_columns,
    SchemaEvolution schema_evolution)
  {
    this();
    this.table_id = table_id;
    this.table_columns = table_columns;
    this.schema_evolution = schema_evolution;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TableSchema(TableSchema other) {
    if (other.isSetTable_id()) {
      this.table_id = other.table_id;
    }
    if (other.isSetTable_columns()) {
      List<ColumnSchema> __this__table_columns = new ArrayList<ColumnSchema>(other.table_columns.size());
      for (ColumnSchema other_element : other.table_columns) {
        __this__table_columns.add(new ColumnSchema(other_element));
      }
      this.table_columns = __this__table_columns;
    }
    if (other.isSetSchema_evolution()) {
      this.schema_evolution = new SchemaEvolution(other.schema_evolution);
    }
    if (other.isSetTableProperties()) {
      Map<String,String> __this__tableProperties = new HashMap<String,String>(other.tableProperties);
      this.tableProperties = __this__tableProperties;
    }
  }

  public TableSchema deepCopy() {
    return new TableSchema(this);
  }

  @Override
  public void clear() {
    this.table_id = null;
    this.table_columns = null;
    this.schema_evolution = null;
    this.tableProperties = null;
  }

  public String getTable_id() {
    return this.table_id;
  }

  public TableSchema setTable_id(String table_id) {
    this.table_id = table_id;
    return this;
  }

  public void unsetTable_id() {
    this.table_id = null;
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return this.table_id != null;
  }

  public void setTable_idIsSet(boolean value) {
    if (!value) {
      this.table_id = null;
    }
  }

  public int getTable_columnsSize() {
    return (this.table_columns == null) ? 0 : this.table_columns.size();
  }

  public java.util.Iterator<ColumnSchema> getTable_columnsIterator() {
    return (this.table_columns == null) ? null : this.table_columns.iterator();
  }

  public void addToTable_columns(ColumnSchema elem) {
    if (this.table_columns == null) {
      this.table_columns = new ArrayList<ColumnSchema>();
    }
    this.table_columns.add(elem);
  }

  public List<ColumnSchema> getTable_columns() {
    return this.table_columns;
  }

  public TableSchema setTable_columns(List<ColumnSchema> table_columns) {
    this.table_columns = table_columns;
    return this;
  }

  public void unsetTable_columns() {
    this.table_columns = null;
  }

  /** Returns true if field table_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_columns() {
    return this.table_columns != null;
  }

  public void setTable_columnsIsSet(boolean value) {
    if (!value) {
      this.table_columns = null;
    }
  }

  public SchemaEvolution getSchema_evolution() {
    return this.schema_evolution;
  }

  public TableSchema setSchema_evolution(SchemaEvolution schema_evolution) {
    this.schema_evolution = schema_evolution;
    return this;
  }

  public void unsetSchema_evolution() {
    this.schema_evolution = null;
  }

  /** Returns true if field schema_evolution is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_evolution() {
    return this.schema_evolution != null;
  }

  public void setSchema_evolutionIsSet(boolean value) {
    if (!value) {
      this.schema_evolution = null;
    }
  }

  public int getTablePropertiesSize() {
    return (this.tableProperties == null) ? 0 : this.tableProperties.size();
  }

  public void putToTableProperties(String key, String val) {
    if (this.tableProperties == null) {
      this.tableProperties = new HashMap<String,String>();
    }
    this.tableProperties.put(key, val);
  }

  public Map<String,String> getTableProperties() {
    return this.tableProperties;
  }

  public TableSchema setTableProperties(Map<String,String> tableProperties) {
    this.tableProperties = tableProperties;
    return this;
  }

  public void unsetTableProperties() {
    this.tableProperties = null;
  }

  /** Returns true if field tableProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetTableProperties() {
    return this.tableProperties != null;
  }

  public void setTablePropertiesIsSet(boolean value) {
    if (!value) {
      this.tableProperties = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((String)value);
      }
      break;

    case TABLE_COLUMNS:
      if (value == null) {
        unsetTable_columns();
      } else {
        setTable_columns((List<ColumnSchema>)value);
      }
      break;

    case SCHEMA_EVOLUTION:
      if (value == null) {
        unsetSchema_evolution();
      } else {
        setSchema_evolution((SchemaEvolution)value);
      }
      break;

    case TABLE_PROPERTIES:
      if (value == null) {
        unsetTableProperties();
      } else {
        setTableProperties((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_ID:
      return getTable_id();

    case TABLE_COLUMNS:
      return getTable_columns();

    case SCHEMA_EVOLUTION:
      return getSchema_evolution();

    case TABLE_PROPERTIES:
      return getTableProperties();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_ID:
      return isSetTable_id();
    case TABLE_COLUMNS:
      return isSetTable_columns();
    case SCHEMA_EVOLUTION:
      return isSetSchema_evolution();
    case TABLE_PROPERTIES:
      return isSetTableProperties();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TableSchema)
      return this.equals((TableSchema)that);
    return false;
  }

  public boolean equals(TableSchema that) {
    if (that == null)
      return false;

    boolean this_present_table_id = true && this.isSetTable_id();
    boolean that_present_table_id = true && that.isSetTable_id();
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (!this.table_id.equals(that.table_id))
        return false;
    }

    boolean this_present_table_columns = true && this.isSetTable_columns();
    boolean that_present_table_columns = true && that.isSetTable_columns();
    if (this_present_table_columns || that_present_table_columns) {
      if (!(this_present_table_columns && that_present_table_columns))
        return false;
      if (!this.table_columns.equals(that.table_columns))
        return false;
    }

    boolean this_present_schema_evolution = true && this.isSetSchema_evolution();
    boolean that_present_schema_evolution = true && that.isSetSchema_evolution();
    if (this_present_schema_evolution || that_present_schema_evolution) {
      if (!(this_present_schema_evolution && that_present_schema_evolution))
        return false;
      if (!this.schema_evolution.equals(that.schema_evolution))
        return false;
    }

    boolean this_present_tableProperties = true && this.isSetTableProperties();
    boolean that_present_tableProperties = true && that.isSetTableProperties();
    if (this_present_tableProperties || that_present_tableProperties) {
      if (!(this_present_tableProperties && that_present_tableProperties))
        return false;
      if (!this.tableProperties.equals(that.tableProperties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_table_id = true && (isSetTable_id());
    list.add(present_table_id);
    if (present_table_id)
      list.add(table_id);

    boolean present_table_columns = true && (isSetTable_columns());
    list.add(present_table_columns);
    if (present_table_columns)
      list.add(table_columns);

    boolean present_schema_evolution = true && (isSetSchema_evolution());
    list.add(present_schema_evolution);
    if (present_schema_evolution)
      list.add(schema_evolution);

    boolean present_tableProperties = true && (isSetTableProperties());
    list.add(present_tableProperties);
    if (present_tableProperties)
      list.add(tableProperties);

    return list.hashCode();
  }

  @Override
  public int compareTo(TableSchema other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTable_id()).compareTo(other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_columns()).compareTo(other.isSetTable_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_columns, other.table_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchema_evolution()).compareTo(other.isSetSchema_evolution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_evolution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_evolution, other.schema_evolution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableProperties()).compareTo(other.isSetTableProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableProperties, other.tableProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TableSchema(");
    boolean first = true;

    sb.append("table_id:");
    if (this.table_id == null) {
      sb.append("null");
    } else {
      sb.append(this.table_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("table_columns:");
    if (this.table_columns == null) {
      sb.append("null");
    } else {
      sb.append(this.table_columns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("schema_evolution:");
    if (this.schema_evolution == null) {
      sb.append("null");
    } else {
      sb.append(this.schema_evolution);
    }
    first = false;
    if (isSetTableProperties()) {
      if (!first) sb.append(", ");
      sb.append("tableProperties:");
      if (this.tableProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.tableProperties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (table_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_id' was not present! Struct: " + toString());
    }
    if (table_columns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_columns' was not present! Struct: " + toString());
    }
    if (schema_evolution == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'schema_evolution' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (schema_evolution != null) {
      schema_evolution.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TableSchemaStandardSchemeFactory implements SchemeFactory {
    public TableSchemaStandardScheme getScheme() {
      return new TableSchemaStandardScheme();
    }
  }

  private static class TableSchemaStandardScheme extends StandardScheme<TableSchema> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TableSchema struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_id = iprot.readString();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.table_columns = new ArrayList<ColumnSchema>(_list42.size);
                ColumnSchema _elem43;
                for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                {
                  _elem43 = new ColumnSchema();
                  _elem43.read(iprot);
                  struct.table_columns.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setTable_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCHEMA_EVOLUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schema_evolution = new SchemaEvolution();
              struct.schema_evolution.read(iprot);
              struct.setSchema_evolutionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLE_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map45 = iprot.readMapBegin();
                struct.tableProperties = new HashMap<String,String>(2*_map45.size);
                String _key46;
                String _val47;
                for (int _i48 = 0; _i48 < _map45.size; ++_i48)
                {
                  _key46 = iprot.readString();
                  _val47 = iprot.readString();
                  struct.tableProperties.put(_key46, _val47);
                }
                iprot.readMapEnd();
              }
              struct.setTablePropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TableSchema struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table_id != null) {
        oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
        oprot.writeString(struct.table_id);
        oprot.writeFieldEnd();
      }
      if (struct.table_columns != null) {
        oprot.writeFieldBegin(TABLE_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.table_columns.size()));
          for (ColumnSchema _iter49 : struct.table_columns)
          {
            _iter49.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.schema_evolution != null) {
        oprot.writeFieldBegin(SCHEMA_EVOLUTION_FIELD_DESC);
        struct.schema_evolution.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tableProperties != null) {
        if (struct.isSetTableProperties()) {
          oprot.writeFieldBegin(TABLE_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.tableProperties.size()));
            for (Map.Entry<String, String> _iter50 : struct.tableProperties.entrySet())
            {
              oprot.writeString(_iter50.getKey());
              oprot.writeString(_iter50.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TableSchemaTupleSchemeFactory implements SchemeFactory {
    public TableSchemaTupleScheme getScheme() {
      return new TableSchemaTupleScheme();
    }
  }

  private static class TableSchemaTupleScheme extends TupleScheme<TableSchema> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TableSchema struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.table_id);
      {
        oprot.writeI32(struct.table_columns.size());
        for (ColumnSchema _iter51 : struct.table_columns)
        {
          _iter51.write(oprot);
        }
      }
      struct.schema_evolution.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetTableProperties()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetTableProperties()) {
        {
          oprot.writeI32(struct.tableProperties.size());
          for (Map.Entry<String, String> _iter52 : struct.tableProperties.entrySet())
          {
            oprot.writeString(_iter52.getKey());
            oprot.writeString(_iter52.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TableSchema struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.table_id = iprot.readString();
      struct.setTable_idIsSet(true);
      {
        org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.table_columns = new ArrayList<ColumnSchema>(_list53.size);
        ColumnSchema _elem54;
        for (int _i55 = 0; _i55 < _list53.size; ++_i55)
        {
          _elem54 = new ColumnSchema();
          _elem54.read(iprot);
          struct.table_columns.add(_elem54);
        }
      }
      struct.setTable_columnsIsSet(true);
      struct.schema_evolution = new SchemaEvolution();
      struct.schema_evolution.read(iprot);
      struct.setSchema_evolutionIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map56 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tableProperties = new HashMap<String,String>(2*_map56.size);
          String _key57;
          String _val58;
          for (int _i59 = 0; _i59 < _map56.size; ++_i59)
          {
            _key57 = iprot.readString();
            _val58 = iprot.readString();
            struct.tableProperties.put(_key57, _val58);
          }
        }
        struct.setTablePropertiesIsSet(true);
      }
    }
  }

}

