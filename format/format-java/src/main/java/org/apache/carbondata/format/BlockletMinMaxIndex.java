/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Min-max index of one blocklet
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class BlockletMinMaxIndex implements org.apache.thrift.TBase<BlockletMinMaxIndex, BlockletMinMaxIndex._Fields>, java.io.Serializable, Cloneable, Comparable<BlockletMinMaxIndex> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlockletMinMaxIndex");

  private static final org.apache.thrift.protocol.TField MIN_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("min_values", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("max_values", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BlockletMinMaxIndexStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BlockletMinMaxIndexTupleSchemeFactory());
  }

  public List<ByteBuffer> min_values; // required
  public List<ByteBuffer> max_values; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MIN_VALUES((short)1, "min_values"),
    MAX_VALUES((short)2, "max_values");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MIN_VALUES
          return MIN_VALUES;
        case 2: // MAX_VALUES
          return MAX_VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MIN_VALUES, new org.apache.thrift.meta_data.FieldMetaData("min_values", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.MAX_VALUES, new org.apache.thrift.meta_data.FieldMetaData("max_values", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlockletMinMaxIndex.class, metaDataMap);
  }

  public BlockletMinMaxIndex() {
  }

  public BlockletMinMaxIndex(
    List<ByteBuffer> min_values,
    List<ByteBuffer> max_values)
  {
    this();
    this.min_values = min_values;
    this.max_values = max_values;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlockletMinMaxIndex(BlockletMinMaxIndex other) {
    if (other.isSetMin_values()) {
      List<ByteBuffer> __this__min_values = new ArrayList<ByteBuffer>(other.min_values);
      this.min_values = __this__min_values;
    }
    if (other.isSetMax_values()) {
      List<ByteBuffer> __this__max_values = new ArrayList<ByteBuffer>(other.max_values);
      this.max_values = __this__max_values;
    }
  }

  public BlockletMinMaxIndex deepCopy() {
    return new BlockletMinMaxIndex(this);
  }

  @Override
  public void clear() {
    this.min_values = null;
    this.max_values = null;
  }

  public int getMin_valuesSize() {
    return (this.min_values == null) ? 0 : this.min_values.size();
  }

  public java.util.Iterator<ByteBuffer> getMin_valuesIterator() {
    return (this.min_values == null) ? null : this.min_values.iterator();
  }

  public void addToMin_values(ByteBuffer elem) {
    if (this.min_values == null) {
      this.min_values = new ArrayList<ByteBuffer>();
    }
    this.min_values.add(elem);
  }

  public List<ByteBuffer> getMin_values() {
    return this.min_values;
  }

  public BlockletMinMaxIndex setMin_values(List<ByteBuffer> min_values) {
    this.min_values = min_values;
    return this;
  }

  public void unsetMin_values() {
    this.min_values = null;
  }

  /** Returns true if field min_values is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_values() {
    return this.min_values != null;
  }

  public void setMin_valuesIsSet(boolean value) {
    if (!value) {
      this.min_values = null;
    }
  }

  public int getMax_valuesSize() {
    return (this.max_values == null) ? 0 : this.max_values.size();
  }

  public java.util.Iterator<ByteBuffer> getMax_valuesIterator() {
    return (this.max_values == null) ? null : this.max_values.iterator();
  }

  public void addToMax_values(ByteBuffer elem) {
    if (this.max_values == null) {
      this.max_values = new ArrayList<ByteBuffer>();
    }
    this.max_values.add(elem);
  }

  public List<ByteBuffer> getMax_values() {
    return this.max_values;
  }

  public BlockletMinMaxIndex setMax_values(List<ByteBuffer> max_values) {
    this.max_values = max_values;
    return this;
  }

  public void unsetMax_values() {
    this.max_values = null;
  }

  /** Returns true if field max_values is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_values() {
    return this.max_values != null;
  }

  public void setMax_valuesIsSet(boolean value) {
    if (!value) {
      this.max_values = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MIN_VALUES:
      if (value == null) {
        unsetMin_values();
      } else {
        setMin_values((List<ByteBuffer>)value);
      }
      break;

    case MAX_VALUES:
      if (value == null) {
        unsetMax_values();
      } else {
        setMax_values((List<ByteBuffer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MIN_VALUES:
      return getMin_values();

    case MAX_VALUES:
      return getMax_values();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MIN_VALUES:
      return isSetMin_values();
    case MAX_VALUES:
      return isSetMax_values();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlockletMinMaxIndex)
      return this.equals((BlockletMinMaxIndex)that);
    return false;
  }

  public boolean equals(BlockletMinMaxIndex that) {
    if (that == null)
      return false;

    boolean this_present_min_values = true && this.isSetMin_values();
    boolean that_present_min_values = true && that.isSetMin_values();
    if (this_present_min_values || that_present_min_values) {
      if (!(this_present_min_values && that_present_min_values))
        return false;
      if (!this.min_values.equals(that.min_values))
        return false;
    }

    boolean this_present_max_values = true && this.isSetMax_values();
    boolean that_present_max_values = true && that.isSetMax_values();
    if (this_present_max_values || that_present_max_values) {
      if (!(this_present_max_values && that_present_max_values))
        return false;
      if (!this.max_values.equals(that.max_values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_min_values = true && (isSetMin_values());
    list.add(present_min_values);
    if (present_min_values)
      list.add(min_values);

    boolean present_max_values = true && (isSetMax_values());
    list.add(present_max_values);
    if (present_max_values)
      list.add(max_values);

    return list.hashCode();
  }

  @Override
  public int compareTo(BlockletMinMaxIndex other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMin_values()).compareTo(other.isSetMin_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_values, other.min_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_values()).compareTo(other.isSetMax_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_values, other.max_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlockletMinMaxIndex(");
    boolean first = true;

    sb.append("min_values:");
    if (this.min_values == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.min_values, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_values:");
    if (this.max_values == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.max_values, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (min_values == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'min_values' was not present! Struct: " + toString());
    }
    if (max_values == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_values' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BlockletMinMaxIndexStandardSchemeFactory implements SchemeFactory {
    public BlockletMinMaxIndexStandardScheme getScheme() {
      return new BlockletMinMaxIndexStandardScheme();
    }
  }

  private static class BlockletMinMaxIndexStandardScheme extends StandardScheme<BlockletMinMaxIndex> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BlockletMinMaxIndex struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MIN_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.min_values = new ArrayList<ByteBuffer>(_list8.size);
                ByteBuffer _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readBinary();
                  struct.min_values.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setMin_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.max_values = new ArrayList<ByteBuffer>(_list11.size);
                ByteBuffer _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = iprot.readBinary();
                  struct.max_values.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setMax_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BlockletMinMaxIndex struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.min_values != null) {
        oprot.writeFieldBegin(MIN_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.min_values.size()));
          for (ByteBuffer _iter14 : struct.min_values)
          {
            oprot.writeBinary(_iter14);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.max_values != null) {
        oprot.writeFieldBegin(MAX_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.max_values.size()));
          for (ByteBuffer _iter15 : struct.max_values)
          {
            oprot.writeBinary(_iter15);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BlockletMinMaxIndexTupleSchemeFactory implements SchemeFactory {
    public BlockletMinMaxIndexTupleScheme getScheme() {
      return new BlockletMinMaxIndexTupleScheme();
    }
  }

  private static class BlockletMinMaxIndexTupleScheme extends TupleScheme<BlockletMinMaxIndex> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BlockletMinMaxIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.min_values.size());
        for (ByteBuffer _iter16 : struct.min_values)
        {
          oprot.writeBinary(_iter16);
        }
      }
      {
        oprot.writeI32(struct.max_values.size());
        for (ByteBuffer _iter17 : struct.max_values)
        {
          oprot.writeBinary(_iter17);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BlockletMinMaxIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.min_values = new ArrayList<ByteBuffer>(_list18.size);
        ByteBuffer _elem19;
        for (int _i20 = 0; _i20 < _list18.size; ++_i20)
        {
          _elem19 = iprot.readBinary();
          struct.min_values.add(_elem19);
        }
      }
      struct.setMin_valuesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.max_values = new ArrayList<ByteBuffer>(_list21.size);
        ByteBuffer _elem22;
        for (int _i23 = 0; _i23 < _list21.size; ++_i23)
        {
          _elem22 = iprot.readBinary();
          struct.max_values.add(_elem22);
        }
      }
      struct.setMax_valuesIsSet(true);
    }
  }

}

