/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Represents a chunk of data. The chunk can be a single column stored in Column Major format or a group of columns stored in Row Major Format.
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class DataChunk implements org.apache.thrift.TBase<DataChunk, DataChunk._Fields>, java.io.Serializable, Cloneable, Comparable<DataChunk> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataChunk");

  private static final org.apache.thrift.protocol.TField CHUNK_META_FIELD_DESC = new org.apache.thrift.protocol.TField("chunk_meta", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ROW_MAJOR_FIELD_DESC = new org.apache.thrift.protocol.TField("rowMajor", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("column_ids", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField DATA_PAGE_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("data_page_offset", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DATA_PAGE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("data_page_length", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ROWID_PAGE_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("rowid_page_offset", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ROWID_PAGE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("rowid_page_length", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField RLE_PAGE_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("rle_page_offset", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField RLE_PAGE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("rle_page_length", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PRESENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("presence", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField SORT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_state", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ENCODERS_FIELD_DESC = new org.apache.thrift.protocol.TField("encoders", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField ENCODER_META_FIELD_DESC = new org.apache.thrift.protocol.TField("encoder_meta", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataChunkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DataChunkTupleSchemeFactory());
  }

  public ChunkCompressionMeta chunk_meta; // required
  public boolean rowMajor; // required
  /**
   * The column IDs in this chunk, in the order in which the data is physically stored, will have atleast one column ID for columnar format, many column ID for row major format*
   */
  public List<Integer> column_ids; // required
  public long data_page_offset; // required
  public int data_page_length; // required
  public long rowid_page_offset; // optional
  public int rowid_page_length; // optional
  public long rle_page_offset; // optional
  public int rle_page_length; // optional
  public PresenceMeta presence; // optional
  /**
   * 
   * @see SortState
   */
  public SortState sort_state; // optional
  public List<org.apache.carbondata.format.Encoding> encoders; // optional
  public List<ByteBuffer> encoder_meta; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHUNK_META((short)1, "chunk_meta"),
    ROW_MAJOR((short)2, "rowMajor"),
    /**
     * The column IDs in this chunk, in the order in which the data is physically stored, will have atleast one column ID for columnar format, many column ID for row major format*
     */
    COLUMN_IDS((short)3, "column_ids"),
    DATA_PAGE_OFFSET((short)4, "data_page_offset"),
    DATA_PAGE_LENGTH((short)5, "data_page_length"),
    ROWID_PAGE_OFFSET((short)6, "rowid_page_offset"),
    ROWID_PAGE_LENGTH((short)7, "rowid_page_length"),
    RLE_PAGE_OFFSET((short)8, "rle_page_offset"),
    RLE_PAGE_LENGTH((short)9, "rle_page_length"),
    PRESENCE((short)10, "presence"),
    /**
     * 
     * @see SortState
     */
    SORT_STATE((short)11, "sort_state"),
    ENCODERS((short)12, "encoders"),
    ENCODER_META((short)13, "encoder_meta");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHUNK_META
          return CHUNK_META;
        case 2: // ROW_MAJOR
          return ROW_MAJOR;
        case 3: // COLUMN_IDS
          return COLUMN_IDS;
        case 4: // DATA_PAGE_OFFSET
          return DATA_PAGE_OFFSET;
        case 5: // DATA_PAGE_LENGTH
          return DATA_PAGE_LENGTH;
        case 6: // ROWID_PAGE_OFFSET
          return ROWID_PAGE_OFFSET;
        case 7: // ROWID_PAGE_LENGTH
          return ROWID_PAGE_LENGTH;
        case 8: // RLE_PAGE_OFFSET
          return RLE_PAGE_OFFSET;
        case 9: // RLE_PAGE_LENGTH
          return RLE_PAGE_LENGTH;
        case 10: // PRESENCE
          return PRESENCE;
        case 11: // SORT_STATE
          return SORT_STATE;
        case 12: // ENCODERS
          return ENCODERS;
        case 13: // ENCODER_META
          return ENCODER_META;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROWMAJOR_ISSET_ID = 0;
  private static final int __DATA_PAGE_OFFSET_ISSET_ID = 1;
  private static final int __DATA_PAGE_LENGTH_ISSET_ID = 2;
  private static final int __ROWID_PAGE_OFFSET_ISSET_ID = 3;
  private static final int __ROWID_PAGE_LENGTH_ISSET_ID = 4;
  private static final int __RLE_PAGE_OFFSET_ISSET_ID = 5;
  private static final int __RLE_PAGE_LENGTH_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ROWID_PAGE_OFFSET,_Fields.ROWID_PAGE_LENGTH,_Fields.RLE_PAGE_OFFSET,_Fields.RLE_PAGE_LENGTH,_Fields.PRESENCE,_Fields.SORT_STATE,_Fields.ENCODERS,_Fields.ENCODER_META};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHUNK_META, new org.apache.thrift.meta_data.FieldMetaData("chunk_meta", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChunkCompressionMeta.class)));
    tmpMap.put(_Fields.ROW_MAJOR, new org.apache.thrift.meta_data.FieldMetaData("rowMajor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COLUMN_IDS, new org.apache.thrift.meta_data.FieldMetaData("column_ids", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DATA_PAGE_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("data_page_offset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_PAGE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("data_page_length", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWID_PAGE_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("rowid_page_offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROWID_PAGE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("rowid_page_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RLE_PAGE_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("rle_page_offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RLE_PAGE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("rle_page_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRESENCE, new org.apache.thrift.meta_data.FieldMetaData("presence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PresenceMeta.class)));
    tmpMap.put(_Fields.SORT_STATE, new org.apache.thrift.meta_data.FieldMetaData("sort_state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SortState.class)));
    tmpMap.put(_Fields.ENCODERS, new org.apache.thrift.meta_data.FieldMetaData("encoders", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.carbondata.format.Encoding.class))));
    tmpMap.put(_Fields.ENCODER_META, new org.apache.thrift.meta_data.FieldMetaData("encoder_meta", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataChunk.class, metaDataMap);
  }

  public DataChunk() {
  }

  public DataChunk(
    ChunkCompressionMeta chunk_meta,
    boolean rowMajor,
    List<Integer> column_ids,
    long data_page_offset,
    int data_page_length)
  {
    this();
    this.chunk_meta = chunk_meta;
    this.rowMajor = rowMajor;
    setRowMajorIsSet(true);
    this.column_ids = column_ids;
    this.data_page_offset = data_page_offset;
    setData_page_offsetIsSet(true);
    this.data_page_length = data_page_length;
    setData_page_lengthIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataChunk(DataChunk other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetChunk_meta()) {
      this.chunk_meta = new ChunkCompressionMeta(other.chunk_meta);
    }
    this.rowMajor = other.rowMajor;
    if (other.isSetColumn_ids()) {
      List<Integer> __this__column_ids = new ArrayList<Integer>(other.column_ids);
      this.column_ids = __this__column_ids;
    }
    this.data_page_offset = other.data_page_offset;
    this.data_page_length = other.data_page_length;
    this.rowid_page_offset = other.rowid_page_offset;
    this.rowid_page_length = other.rowid_page_length;
    this.rle_page_offset = other.rle_page_offset;
    this.rle_page_length = other.rle_page_length;
    if (other.isSetPresence()) {
      this.presence = new PresenceMeta(other.presence);
    }
    if (other.isSetSort_state()) {
      this.sort_state = other.sort_state;
    }
    if (other.isSetEncoders()) {
      List<org.apache.carbondata.format.Encoding> __this__encoders = new ArrayList<org.apache.carbondata.format.Encoding>(other.encoders.size());
      for (org.apache.carbondata.format.Encoding other_element : other.encoders) {
        __this__encoders.add(other_element);
      }
      this.encoders = __this__encoders;
    }
    if (other.isSetEncoder_meta()) {
      List<ByteBuffer> __this__encoder_meta = new ArrayList<ByteBuffer>(other.encoder_meta);
      this.encoder_meta = __this__encoder_meta;
    }
  }

  public DataChunk deepCopy() {
    return new DataChunk(this);
  }

  @Override
  public void clear() {
    this.chunk_meta = null;
    setRowMajorIsSet(false);
    this.rowMajor = false;
    this.column_ids = null;
    setData_page_offsetIsSet(false);
    this.data_page_offset = 0;
    setData_page_lengthIsSet(false);
    this.data_page_length = 0;
    setRowid_page_offsetIsSet(false);
    this.rowid_page_offset = 0;
    setRowid_page_lengthIsSet(false);
    this.rowid_page_length = 0;
    setRle_page_offsetIsSet(false);
    this.rle_page_offset = 0;
    setRle_page_lengthIsSet(false);
    this.rle_page_length = 0;
    this.presence = null;
    this.sort_state = null;
    this.encoders = null;
    this.encoder_meta = null;
  }

  public ChunkCompressionMeta getChunk_meta() {
    return this.chunk_meta;
  }

  public DataChunk setChunk_meta(ChunkCompressionMeta chunk_meta) {
    this.chunk_meta = chunk_meta;
    return this;
  }

  public void unsetChunk_meta() {
    this.chunk_meta = null;
  }

  /** Returns true if field chunk_meta is set (has been assigned a value) and false otherwise */
  public boolean isSetChunk_meta() {
    return this.chunk_meta != null;
  }

  public void setChunk_metaIsSet(boolean value) {
    if (!value) {
      this.chunk_meta = null;
    }
  }

  public boolean isRowMajor() {
    return this.rowMajor;
  }

  public DataChunk setRowMajor(boolean rowMajor) {
    this.rowMajor = rowMajor;
    setRowMajorIsSet(true);
    return this;
  }

  public void unsetRowMajor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWMAJOR_ISSET_ID);
  }

  /** Returns true if field rowMajor is set (has been assigned a value) and false otherwise */
  public boolean isSetRowMajor() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWMAJOR_ISSET_ID);
  }

  public void setRowMajorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWMAJOR_ISSET_ID, value);
  }

  public int getColumn_idsSize() {
    return (this.column_ids == null) ? 0 : this.column_ids.size();
  }

  public java.util.Iterator<Integer> getColumn_idsIterator() {
    return (this.column_ids == null) ? null : this.column_ids.iterator();
  }

  public void addToColumn_ids(int elem) {
    if (this.column_ids == null) {
      this.column_ids = new ArrayList<Integer>();
    }
    this.column_ids.add(elem);
  }

  /**
   * The column IDs in this chunk, in the order in which the data is physically stored, will have atleast one column ID for columnar format, many column ID for row major format*
   */
  public List<Integer> getColumn_ids() {
    return this.column_ids;
  }

  /**
   * The column IDs in this chunk, in the order in which the data is physically stored, will have atleast one column ID for columnar format, many column ID for row major format*
   */
  public DataChunk setColumn_ids(List<Integer> column_ids) {
    this.column_ids = column_ids;
    return this;
  }

  public void unsetColumn_ids() {
    this.column_ids = null;
  }

  /** Returns true if field column_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_ids() {
    return this.column_ids != null;
  }

  public void setColumn_idsIsSet(boolean value) {
    if (!value) {
      this.column_ids = null;
    }
  }

  public long getData_page_offset() {
    return this.data_page_offset;
  }

  public DataChunk setData_page_offset(long data_page_offset) {
    this.data_page_offset = data_page_offset;
    setData_page_offsetIsSet(true);
    return this;
  }

  public void unsetData_page_offset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATA_PAGE_OFFSET_ISSET_ID);
  }

  /** Returns true if field data_page_offset is set (has been assigned a value) and false otherwise */
  public boolean isSetData_page_offset() {
    return EncodingUtils.testBit(__isset_bitfield, __DATA_PAGE_OFFSET_ISSET_ID);
  }

  public void setData_page_offsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATA_PAGE_OFFSET_ISSET_ID, value);
  }

  public int getData_page_length() {
    return this.data_page_length;
  }

  public DataChunk setData_page_length(int data_page_length) {
    this.data_page_length = data_page_length;
    setData_page_lengthIsSet(true);
    return this;
  }

  public void unsetData_page_length() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATA_PAGE_LENGTH_ISSET_ID);
  }

  /** Returns true if field data_page_length is set (has been assigned a value) and false otherwise */
  public boolean isSetData_page_length() {
    return EncodingUtils.testBit(__isset_bitfield, __DATA_PAGE_LENGTH_ISSET_ID);
  }

  public void setData_page_lengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATA_PAGE_LENGTH_ISSET_ID, value);
  }

  public long getRowid_page_offset() {
    return this.rowid_page_offset;
  }

  public DataChunk setRowid_page_offset(long rowid_page_offset) {
    this.rowid_page_offset = rowid_page_offset;
    setRowid_page_offsetIsSet(true);
    return this;
  }

  public void unsetRowid_page_offset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWID_PAGE_OFFSET_ISSET_ID);
  }

  /** Returns true if field rowid_page_offset is set (has been assigned a value) and false otherwise */
  public boolean isSetRowid_page_offset() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWID_PAGE_OFFSET_ISSET_ID);
  }

  public void setRowid_page_offsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWID_PAGE_OFFSET_ISSET_ID, value);
  }

  public int getRowid_page_length() {
    return this.rowid_page_length;
  }

  public DataChunk setRowid_page_length(int rowid_page_length) {
    this.rowid_page_length = rowid_page_length;
    setRowid_page_lengthIsSet(true);
    return this;
  }

  public void unsetRowid_page_length() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWID_PAGE_LENGTH_ISSET_ID);
  }

  /** Returns true if field rowid_page_length is set (has been assigned a value) and false otherwise */
  public boolean isSetRowid_page_length() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWID_PAGE_LENGTH_ISSET_ID);
  }

  public void setRowid_page_lengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWID_PAGE_LENGTH_ISSET_ID, value);
  }

  public long getRle_page_offset() {
    return this.rle_page_offset;
  }

  public DataChunk setRle_page_offset(long rle_page_offset) {
    this.rle_page_offset = rle_page_offset;
    setRle_page_offsetIsSet(true);
    return this;
  }

  public void unsetRle_page_offset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RLE_PAGE_OFFSET_ISSET_ID);
  }

  /** Returns true if field rle_page_offset is set (has been assigned a value) and false otherwise */
  public boolean isSetRle_page_offset() {
    return EncodingUtils.testBit(__isset_bitfield, __RLE_PAGE_OFFSET_ISSET_ID);
  }

  public void setRle_page_offsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RLE_PAGE_OFFSET_ISSET_ID, value);
  }

  public int getRle_page_length() {
    return this.rle_page_length;
  }

  public DataChunk setRle_page_length(int rle_page_length) {
    this.rle_page_length = rle_page_length;
    setRle_page_lengthIsSet(true);
    return this;
  }

  public void unsetRle_page_length() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RLE_PAGE_LENGTH_ISSET_ID);
  }

  /** Returns true if field rle_page_length is set (has been assigned a value) and false otherwise */
  public boolean isSetRle_page_length() {
    return EncodingUtils.testBit(__isset_bitfield, __RLE_PAGE_LENGTH_ISSET_ID);
  }

  public void setRle_page_lengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RLE_PAGE_LENGTH_ISSET_ID, value);
  }

  public PresenceMeta getPresence() {
    return this.presence;
  }

  public DataChunk setPresence(PresenceMeta presence) {
    this.presence = presence;
    return this;
  }

  public void unsetPresence() {
    this.presence = null;
  }

  /** Returns true if field presence is set (has been assigned a value) and false otherwise */
  public boolean isSetPresence() {
    return this.presence != null;
  }

  public void setPresenceIsSet(boolean value) {
    if (!value) {
      this.presence = null;
    }
  }

  /**
   * 
   * @see SortState
   */
  public SortState getSort_state() {
    return this.sort_state;
  }

  /**
   * 
   * @see SortState
   */
  public DataChunk setSort_state(SortState sort_state) {
    this.sort_state = sort_state;
    return this;
  }

  public void unsetSort_state() {
    this.sort_state = null;
  }

  /** Returns true if field sort_state is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_state() {
    return this.sort_state != null;
  }

  public void setSort_stateIsSet(boolean value) {
    if (!value) {
      this.sort_state = null;
    }
  }

  public int getEncodersSize() {
    return (this.encoders == null) ? 0 : this.encoders.size();
  }

  public java.util.Iterator<org.apache.carbondata.format.Encoding> getEncodersIterator() {
    return (this.encoders == null) ? null : this.encoders.iterator();
  }

  public void addToEncoders(org.apache.carbondata.format.Encoding elem) {
    if (this.encoders == null) {
      this.encoders = new ArrayList<org.apache.carbondata.format.Encoding>();
    }
    this.encoders.add(elem);
  }

  public List<org.apache.carbondata.format.Encoding> getEncoders() {
    return this.encoders;
  }

  public DataChunk setEncoders(List<org.apache.carbondata.format.Encoding> encoders) {
    this.encoders = encoders;
    return this;
  }

  public void unsetEncoders() {
    this.encoders = null;
  }

  /** Returns true if field encoders is set (has been assigned a value) and false otherwise */
  public boolean isSetEncoders() {
    return this.encoders != null;
  }

  public void setEncodersIsSet(boolean value) {
    if (!value) {
      this.encoders = null;
    }
  }

  public int getEncoder_metaSize() {
    return (this.encoder_meta == null) ? 0 : this.encoder_meta.size();
  }

  public java.util.Iterator<ByteBuffer> getEncoder_metaIterator() {
    return (this.encoder_meta == null) ? null : this.encoder_meta.iterator();
  }

  public void addToEncoder_meta(ByteBuffer elem) {
    if (this.encoder_meta == null) {
      this.encoder_meta = new ArrayList<ByteBuffer>();
    }
    this.encoder_meta.add(elem);
  }

  public List<ByteBuffer> getEncoder_meta() {
    return this.encoder_meta;
  }

  public DataChunk setEncoder_meta(List<ByteBuffer> encoder_meta) {
    this.encoder_meta = encoder_meta;
    return this;
  }

  public void unsetEncoder_meta() {
    this.encoder_meta = null;
  }

  /** Returns true if field encoder_meta is set (has been assigned a value) and false otherwise */
  public boolean isSetEncoder_meta() {
    return this.encoder_meta != null;
  }

  public void setEncoder_metaIsSet(boolean value) {
    if (!value) {
      this.encoder_meta = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHUNK_META:
      if (value == null) {
        unsetChunk_meta();
      } else {
        setChunk_meta((ChunkCompressionMeta)value);
      }
      break;

    case ROW_MAJOR:
      if (value == null) {
        unsetRowMajor();
      } else {
        setRowMajor((Boolean)value);
      }
      break;

    case COLUMN_IDS:
      if (value == null) {
        unsetColumn_ids();
      } else {
        setColumn_ids((List<Integer>)value);
      }
      break;

    case DATA_PAGE_OFFSET:
      if (value == null) {
        unsetData_page_offset();
      } else {
        setData_page_offset((Long)value);
      }
      break;

    case DATA_PAGE_LENGTH:
      if (value == null) {
        unsetData_page_length();
      } else {
        setData_page_length((Integer)value);
      }
      break;

    case ROWID_PAGE_OFFSET:
      if (value == null) {
        unsetRowid_page_offset();
      } else {
        setRowid_page_offset((Long)value);
      }
      break;

    case ROWID_PAGE_LENGTH:
      if (value == null) {
        unsetRowid_page_length();
      } else {
        setRowid_page_length((Integer)value);
      }
      break;

    case RLE_PAGE_OFFSET:
      if (value == null) {
        unsetRle_page_offset();
      } else {
        setRle_page_offset((Long)value);
      }
      break;

    case RLE_PAGE_LENGTH:
      if (value == null) {
        unsetRle_page_length();
      } else {
        setRle_page_length((Integer)value);
      }
      break;

    case PRESENCE:
      if (value == null) {
        unsetPresence();
      } else {
        setPresence((PresenceMeta)value);
      }
      break;

    case SORT_STATE:
      if (value == null) {
        unsetSort_state();
      } else {
        setSort_state((SortState)value);
      }
      break;

    case ENCODERS:
      if (value == null) {
        unsetEncoders();
      } else {
        setEncoders((List<org.apache.carbondata.format.Encoding>)value);
      }
      break;

    case ENCODER_META:
      if (value == null) {
        unsetEncoder_meta();
      } else {
        setEncoder_meta((List<ByteBuffer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHUNK_META:
      return getChunk_meta();

    case ROW_MAJOR:
      return isRowMajor();

    case COLUMN_IDS:
      return getColumn_ids();

    case DATA_PAGE_OFFSET:
      return getData_page_offset();

    case DATA_PAGE_LENGTH:
      return getData_page_length();

    case ROWID_PAGE_OFFSET:
      return getRowid_page_offset();

    case ROWID_PAGE_LENGTH:
      return getRowid_page_length();

    case RLE_PAGE_OFFSET:
      return getRle_page_offset();

    case RLE_PAGE_LENGTH:
      return getRle_page_length();

    case PRESENCE:
      return getPresence();

    case SORT_STATE:
      return getSort_state();

    case ENCODERS:
      return getEncoders();

    case ENCODER_META:
      return getEncoder_meta();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHUNK_META:
      return isSetChunk_meta();
    case ROW_MAJOR:
      return isSetRowMajor();
    case COLUMN_IDS:
      return isSetColumn_ids();
    case DATA_PAGE_OFFSET:
      return isSetData_page_offset();
    case DATA_PAGE_LENGTH:
      return isSetData_page_length();
    case ROWID_PAGE_OFFSET:
      return isSetRowid_page_offset();
    case ROWID_PAGE_LENGTH:
      return isSetRowid_page_length();
    case RLE_PAGE_OFFSET:
      return isSetRle_page_offset();
    case RLE_PAGE_LENGTH:
      return isSetRle_page_length();
    case PRESENCE:
      return isSetPresence();
    case SORT_STATE:
      return isSetSort_state();
    case ENCODERS:
      return isSetEncoders();
    case ENCODER_META:
      return isSetEncoder_meta();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataChunk)
      return this.equals((DataChunk)that);
    return false;
  }

  public boolean equals(DataChunk that) {
    if (that == null)
      return false;

    boolean this_present_chunk_meta = true && this.isSetChunk_meta();
    boolean that_present_chunk_meta = true && that.isSetChunk_meta();
    if (this_present_chunk_meta || that_present_chunk_meta) {
      if (!(this_present_chunk_meta && that_present_chunk_meta))
        return false;
      if (!this.chunk_meta.equals(that.chunk_meta))
        return false;
    }

    boolean this_present_rowMajor = true;
    boolean that_present_rowMajor = true;
    if (this_present_rowMajor || that_present_rowMajor) {
      if (!(this_present_rowMajor && that_present_rowMajor))
        return false;
      if (this.rowMajor != that.rowMajor)
        return false;
    }

    boolean this_present_column_ids = true && this.isSetColumn_ids();
    boolean that_present_column_ids = true && that.isSetColumn_ids();
    if (this_present_column_ids || that_present_column_ids) {
      if (!(this_present_column_ids && that_present_column_ids))
        return false;
      if (!this.column_ids.equals(that.column_ids))
        return false;
    }

    boolean this_present_data_page_offset = true;
    boolean that_present_data_page_offset = true;
    if (this_present_data_page_offset || that_present_data_page_offset) {
      if (!(this_present_data_page_offset && that_present_data_page_offset))
        return false;
      if (this.data_page_offset != that.data_page_offset)
        return false;
    }

    boolean this_present_data_page_length = true;
    boolean that_present_data_page_length = true;
    if (this_present_data_page_length || that_present_data_page_length) {
      if (!(this_present_data_page_length && that_present_data_page_length))
        return false;
      if (this.data_page_length != that.data_page_length)
        return false;
    }

    boolean this_present_rowid_page_offset = true && this.isSetRowid_page_offset();
    boolean that_present_rowid_page_offset = true && that.isSetRowid_page_offset();
    if (this_present_rowid_page_offset || that_present_rowid_page_offset) {
      if (!(this_present_rowid_page_offset && that_present_rowid_page_offset))
        return false;
      if (this.rowid_page_offset != that.rowid_page_offset)
        return false;
    }

    boolean this_present_rowid_page_length = true && this.isSetRowid_page_length();
    boolean that_present_rowid_page_length = true && that.isSetRowid_page_length();
    if (this_present_rowid_page_length || that_present_rowid_page_length) {
      if (!(this_present_rowid_page_length && that_present_rowid_page_length))
        return false;
      if (this.rowid_page_length != that.rowid_page_length)
        return false;
    }

    boolean this_present_rle_page_offset = true && this.isSetRle_page_offset();
    boolean that_present_rle_page_offset = true && that.isSetRle_page_offset();
    if (this_present_rle_page_offset || that_present_rle_page_offset) {
      if (!(this_present_rle_page_offset && that_present_rle_page_offset))
        return false;
      if (this.rle_page_offset != that.rle_page_offset)
        return false;
    }

    boolean this_present_rle_page_length = true && this.isSetRle_page_length();
    boolean that_present_rle_page_length = true && that.isSetRle_page_length();
    if (this_present_rle_page_length || that_present_rle_page_length) {
      if (!(this_present_rle_page_length && that_present_rle_page_length))
        return false;
      if (this.rle_page_length != that.rle_page_length)
        return false;
    }

    boolean this_present_presence = true && this.isSetPresence();
    boolean that_present_presence = true && that.isSetPresence();
    if (this_present_presence || that_present_presence) {
      if (!(this_present_presence && that_present_presence))
        return false;
      if (!this.presence.equals(that.presence))
        return false;
    }

    boolean this_present_sort_state = true && this.isSetSort_state();
    boolean that_present_sort_state = true && that.isSetSort_state();
    if (this_present_sort_state || that_present_sort_state) {
      if (!(this_present_sort_state && that_present_sort_state))
        return false;
      if (!this.sort_state.equals(that.sort_state))
        return false;
    }

    boolean this_present_encoders = true && this.isSetEncoders();
    boolean that_present_encoders = true && that.isSetEncoders();
    if (this_present_encoders || that_present_encoders) {
      if (!(this_present_encoders && that_present_encoders))
        return false;
      if (!this.encoders.equals(that.encoders))
        return false;
    }

    boolean this_present_encoder_meta = true && this.isSetEncoder_meta();
    boolean that_present_encoder_meta = true && that.isSetEncoder_meta();
    if (this_present_encoder_meta || that_present_encoder_meta) {
      if (!(this_present_encoder_meta && that_present_encoder_meta))
        return false;
      if (!this.encoder_meta.equals(that.encoder_meta))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_chunk_meta = true && (isSetChunk_meta());
    list.add(present_chunk_meta);
    if (present_chunk_meta)
      list.add(chunk_meta);

    boolean present_rowMajor = true;
    list.add(present_rowMajor);
    if (present_rowMajor)
      list.add(rowMajor);

    boolean present_column_ids = true && (isSetColumn_ids());
    list.add(present_column_ids);
    if (present_column_ids)
      list.add(column_ids);

    boolean present_data_page_offset = true;
    list.add(present_data_page_offset);
    if (present_data_page_offset)
      list.add(data_page_offset);

    boolean present_data_page_length = true;
    list.add(present_data_page_length);
    if (present_data_page_length)
      list.add(data_page_length);

    boolean present_rowid_page_offset = true && (isSetRowid_page_offset());
    list.add(present_rowid_page_offset);
    if (present_rowid_page_offset)
      list.add(rowid_page_offset);

    boolean present_rowid_page_length = true && (isSetRowid_page_length());
    list.add(present_rowid_page_length);
    if (present_rowid_page_length)
      list.add(rowid_page_length);

    boolean present_rle_page_offset = true && (isSetRle_page_offset());
    list.add(present_rle_page_offset);
    if (present_rle_page_offset)
      list.add(rle_page_offset);

    boolean present_rle_page_length = true && (isSetRle_page_length());
    list.add(present_rle_page_length);
    if (present_rle_page_length)
      list.add(rle_page_length);

    boolean present_presence = true && (isSetPresence());
    list.add(present_presence);
    if (present_presence)
      list.add(presence);

    boolean present_sort_state = true && (isSetSort_state());
    list.add(present_sort_state);
    if (present_sort_state)
      list.add(sort_state.getValue());

    boolean present_encoders = true && (isSetEncoders());
    list.add(present_encoders);
    if (present_encoders)
      list.add(encoders);

    boolean present_encoder_meta = true && (isSetEncoder_meta());
    list.add(present_encoder_meta);
    if (present_encoder_meta)
      list.add(encoder_meta);

    return list.hashCode();
  }

  @Override
  public int compareTo(DataChunk other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetChunk_meta()).compareTo(other.isSetChunk_meta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChunk_meta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunk_meta, other.chunk_meta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRowMajor()).compareTo(other.isSetRowMajor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowMajor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowMajor, other.rowMajor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_ids()).compareTo(other.isSetColumn_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_ids, other.column_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData_page_offset()).compareTo(other.isSetData_page_offset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_page_offset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_page_offset, other.data_page_offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData_page_length()).compareTo(other.isSetData_page_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_page_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_page_length, other.data_page_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRowid_page_offset()).compareTo(other.isSetRowid_page_offset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowid_page_offset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowid_page_offset, other.rowid_page_offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRowid_page_length()).compareTo(other.isSetRowid_page_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowid_page_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowid_page_length, other.rowid_page_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRle_page_offset()).compareTo(other.isSetRle_page_offset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRle_page_offset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rle_page_offset, other.rle_page_offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRle_page_length()).compareTo(other.isSetRle_page_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRle_page_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rle_page_length, other.rle_page_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPresence()).compareTo(other.isSetPresence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPresence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.presence, other.presence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSort_state()).compareTo(other.isSetSort_state());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_state()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_state, other.sort_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEncoders()).compareTo(other.isSetEncoders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncoders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encoders, other.encoders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEncoder_meta()).compareTo(other.isSetEncoder_meta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncoder_meta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encoder_meta, other.encoder_meta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataChunk(");
    boolean first = true;

    sb.append("chunk_meta:");
    if (this.chunk_meta == null) {
      sb.append("null");
    } else {
      sb.append(this.chunk_meta);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rowMajor:");
    sb.append(this.rowMajor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("column_ids:");
    if (this.column_ids == null) {
      sb.append("null");
    } else {
      sb.append(this.column_ids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data_page_offset:");
    sb.append(this.data_page_offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("data_page_length:");
    sb.append(this.data_page_length);
    first = false;
    if (isSetRowid_page_offset()) {
      if (!first) sb.append(", ");
      sb.append("rowid_page_offset:");
      sb.append(this.rowid_page_offset);
      first = false;
    }
    if (isSetRowid_page_length()) {
      if (!first) sb.append(", ");
      sb.append("rowid_page_length:");
      sb.append(this.rowid_page_length);
      first = false;
    }
    if (isSetRle_page_offset()) {
      if (!first) sb.append(", ");
      sb.append("rle_page_offset:");
      sb.append(this.rle_page_offset);
      first = false;
    }
    if (isSetRle_page_length()) {
      if (!first) sb.append(", ");
      sb.append("rle_page_length:");
      sb.append(this.rle_page_length);
      first = false;
    }
    if (isSetPresence()) {
      if (!first) sb.append(", ");
      sb.append("presence:");
      if (this.presence == null) {
        sb.append("null");
      } else {
        sb.append(this.presence);
      }
      first = false;
    }
    if (isSetSort_state()) {
      if (!first) sb.append(", ");
      sb.append("sort_state:");
      if (this.sort_state == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_state);
      }
      first = false;
    }
    if (isSetEncoders()) {
      if (!first) sb.append(", ");
      sb.append("encoders:");
      if (this.encoders == null) {
        sb.append("null");
      } else {
        sb.append(this.encoders);
      }
      first = false;
    }
    if (isSetEncoder_meta()) {
      if (!first) sb.append(", ");
      sb.append("encoder_meta:");
      if (this.encoder_meta == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.encoder_meta, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (chunk_meta == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'chunk_meta' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'rowMajor' because it's a primitive and you chose the non-beans generator.
    if (column_ids == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_ids' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'data_page_offset' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'data_page_length' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (chunk_meta != null) {
      chunk_meta.validate();
    }
    if (presence != null) {
      presence.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataChunkStandardSchemeFactory implements SchemeFactory {
    public DataChunkStandardScheme getScheme() {
      return new DataChunkStandardScheme();
    }
  }

  private static class DataChunkStandardScheme extends StandardScheme<DataChunk> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataChunk struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHUNK_META
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.chunk_meta = new ChunkCompressionMeta();
              struct.chunk_meta.read(iprot);
              struct.setChunk_metaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROW_MAJOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.rowMajor = iprot.readBool();
              struct.setRowMajorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.column_ids = new ArrayList<Integer>(_list24.size);
                int _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readI32();
                  struct.column_ids.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setColumn_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATA_PAGE_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.data_page_offset = iprot.readI64();
              struct.setData_page_offsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATA_PAGE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.data_page_length = iprot.readI32();
              struct.setData_page_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ROWID_PAGE_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rowid_page_offset = iprot.readI64();
              struct.setRowid_page_offsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROWID_PAGE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rowid_page_length = iprot.readI32();
              struct.setRowid_page_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RLE_PAGE_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rle_page_offset = iprot.readI64();
              struct.setRle_page_offsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RLE_PAGE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rle_page_length = iprot.readI32();
              struct.setRle_page_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRESENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.presence = new PresenceMeta();
              struct.presence.read(iprot);
              struct.setPresenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SORT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sort_state = org.apache.carbondata.format.SortState.findByValue(iprot.readI32());
              struct.setSort_stateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ENCODERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.encoders = new ArrayList<org.apache.carbondata.format.Encoding>(_list27.size);
                org.apache.carbondata.format.Encoding _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = org.apache.carbondata.format.Encoding.findByValue(iprot.readI32());
                  struct.encoders.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setEncodersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ENCODER_META
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.encoder_meta = new ArrayList<ByteBuffer>(_list30.size);
                ByteBuffer _elem31;
                for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                {
                  _elem31 = iprot.readBinary();
                  struct.encoder_meta.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setEncoder_metaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRowMajor()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rowMajor' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetData_page_offset()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'data_page_offset' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetData_page_length()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'data_page_length' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataChunk struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.chunk_meta != null) {
        oprot.writeFieldBegin(CHUNK_META_FIELD_DESC);
        struct.chunk_meta.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROW_MAJOR_FIELD_DESC);
      oprot.writeBool(struct.rowMajor);
      oprot.writeFieldEnd();
      if (struct.column_ids != null) {
        oprot.writeFieldBegin(COLUMN_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.column_ids.size()));
          for (int _iter33 : struct.column_ids)
          {
            oprot.writeI32(_iter33);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATA_PAGE_OFFSET_FIELD_DESC);
      oprot.writeI64(struct.data_page_offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATA_PAGE_LENGTH_FIELD_DESC);
      oprot.writeI32(struct.data_page_length);
      oprot.writeFieldEnd();
      if (struct.isSetRowid_page_offset()) {
        oprot.writeFieldBegin(ROWID_PAGE_OFFSET_FIELD_DESC);
        oprot.writeI64(struct.rowid_page_offset);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRowid_page_length()) {
        oprot.writeFieldBegin(ROWID_PAGE_LENGTH_FIELD_DESC);
        oprot.writeI32(struct.rowid_page_length);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRle_page_offset()) {
        oprot.writeFieldBegin(RLE_PAGE_OFFSET_FIELD_DESC);
        oprot.writeI64(struct.rle_page_offset);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRle_page_length()) {
        oprot.writeFieldBegin(RLE_PAGE_LENGTH_FIELD_DESC);
        oprot.writeI32(struct.rle_page_length);
        oprot.writeFieldEnd();
      }
      if (struct.presence != null) {
        if (struct.isSetPresence()) {
          oprot.writeFieldBegin(PRESENCE_FIELD_DESC);
          struct.presence.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sort_state != null) {
        if (struct.isSetSort_state()) {
          oprot.writeFieldBegin(SORT_STATE_FIELD_DESC);
          oprot.writeI32(struct.sort_state.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.encoders != null) {
        if (struct.isSetEncoders()) {
          oprot.writeFieldBegin(ENCODERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.encoders.size()));
            for (org.apache.carbondata.format.Encoding _iter34 : struct.encoders)
            {
              oprot.writeI32(_iter34.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.encoder_meta != null) {
        if (struct.isSetEncoder_meta()) {
          oprot.writeFieldBegin(ENCODER_META_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.encoder_meta.size()));
            for (ByteBuffer _iter35 : struct.encoder_meta)
            {
              oprot.writeBinary(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataChunkTupleSchemeFactory implements SchemeFactory {
    public DataChunkTupleScheme getScheme() {
      return new DataChunkTupleScheme();
    }
  }

  private static class DataChunkTupleScheme extends TupleScheme<DataChunk> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DataChunk struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.chunk_meta.write(oprot);
      oprot.writeBool(struct.rowMajor);
      {
        oprot.writeI32(struct.column_ids.size());
        for (int _iter36 : struct.column_ids)
        {
          oprot.writeI32(_iter36);
        }
      }
      oprot.writeI64(struct.data_page_offset);
      oprot.writeI32(struct.data_page_length);
      BitSet optionals = new BitSet();
      if (struct.isSetRowid_page_offset()) {
        optionals.set(0);
      }
      if (struct.isSetRowid_page_length()) {
        optionals.set(1);
      }
      if (struct.isSetRle_page_offset()) {
        optionals.set(2);
      }
      if (struct.isSetRle_page_length()) {
        optionals.set(3);
      }
      if (struct.isSetPresence()) {
        optionals.set(4);
      }
      if (struct.isSetSort_state()) {
        optionals.set(5);
      }
      if (struct.isSetEncoders()) {
        optionals.set(6);
      }
      if (struct.isSetEncoder_meta()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetRowid_page_offset()) {
        oprot.writeI64(struct.rowid_page_offset);
      }
      if (struct.isSetRowid_page_length()) {
        oprot.writeI32(struct.rowid_page_length);
      }
      if (struct.isSetRle_page_offset()) {
        oprot.writeI64(struct.rle_page_offset);
      }
      if (struct.isSetRle_page_length()) {
        oprot.writeI32(struct.rle_page_length);
      }
      if (struct.isSetPresence()) {
        struct.presence.write(oprot);
      }
      if (struct.isSetSort_state()) {
        oprot.writeI32(struct.sort_state.getValue());
      }
      if (struct.isSetEncoders()) {
        {
          oprot.writeI32(struct.encoders.size());
          for (org.apache.carbondata.format.Encoding _iter37 : struct.encoders)
          {
            oprot.writeI32(_iter37.getValue());
          }
        }
      }
      if (struct.isSetEncoder_meta()) {
        {
          oprot.writeI32(struct.encoder_meta.size());
          for (ByteBuffer _iter38 : struct.encoder_meta)
          {
            oprot.writeBinary(_iter38);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DataChunk struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.chunk_meta = new ChunkCompressionMeta();
      struct.chunk_meta.read(iprot);
      struct.setChunk_metaIsSet(true);
      struct.rowMajor = iprot.readBool();
      struct.setRowMajorIsSet(true);
      {
        org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.column_ids = new ArrayList<Integer>(_list39.size);
        int _elem40;
        for (int _i41 = 0; _i41 < _list39.size; ++_i41)
        {
          _elem40 = iprot.readI32();
          struct.column_ids.add(_elem40);
        }
      }
      struct.setColumn_idsIsSet(true);
      struct.data_page_offset = iprot.readI64();
      struct.setData_page_offsetIsSet(true);
      struct.data_page_length = iprot.readI32();
      struct.setData_page_lengthIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.rowid_page_offset = iprot.readI64();
        struct.setRowid_page_offsetIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rowid_page_length = iprot.readI32();
        struct.setRowid_page_lengthIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rle_page_offset = iprot.readI64();
        struct.setRle_page_offsetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rle_page_length = iprot.readI32();
        struct.setRle_page_lengthIsSet(true);
      }
      if (incoming.get(4)) {
        struct.presence = new PresenceMeta();
        struct.presence.read(iprot);
        struct.setPresenceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sort_state = org.apache.carbondata.format.SortState.findByValue(iprot.readI32());
        struct.setSort_stateIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.encoders = new ArrayList<org.apache.carbondata.format.Encoding>(_list42.size);
          org.apache.carbondata.format.Encoding _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = org.apache.carbondata.format.Encoding.findByValue(iprot.readI32());
            struct.encoders.add(_elem43);
          }
        }
        struct.setEncodersIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.encoder_meta = new ArrayList<ByteBuffer>(_list45.size);
          ByteBuffer _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readBinary();
            struct.encoder_meta.add(_elem46);
          }
        }
        struct.setEncoder_metaIsSet(true);
      }
    }
  }

}

