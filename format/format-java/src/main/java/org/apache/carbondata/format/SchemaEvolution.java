/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * History of schema evolution
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class SchemaEvolution implements org.apache.thrift.TBase<SchemaEvolution, SchemaEvolution._Fields>, java.io.Serializable, Cloneable, Comparable<SchemaEvolution> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SchemaEvolution");

  private static final org.apache.thrift.protocol.TField SCHEMA_EVOLUTION_HISTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_evolution_history", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SchemaEvolutionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SchemaEvolutionTupleSchemeFactory());
  }

  public List<SchemaEvolutionEntry> schema_evolution_history; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCHEMA_EVOLUTION_HISTORY((short)1, "schema_evolution_history");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCHEMA_EVOLUTION_HISTORY
          return SCHEMA_EVOLUTION_HISTORY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCHEMA_EVOLUTION_HISTORY, new org.apache.thrift.meta_data.FieldMetaData("schema_evolution_history", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SchemaEvolutionEntry.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SchemaEvolution.class, metaDataMap);
  }

  public SchemaEvolution() {
  }

  public SchemaEvolution(
    List<SchemaEvolutionEntry> schema_evolution_history)
  {
    this();
    this.schema_evolution_history = schema_evolution_history;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SchemaEvolution(SchemaEvolution other) {
    if (other.isSetSchema_evolution_history()) {
      List<SchemaEvolutionEntry> __this__schema_evolution_history = new ArrayList<SchemaEvolutionEntry>(other.schema_evolution_history.size());
      for (SchemaEvolutionEntry other_element : other.schema_evolution_history) {
        __this__schema_evolution_history.add(new SchemaEvolutionEntry(other_element));
      }
      this.schema_evolution_history = __this__schema_evolution_history;
    }
  }

  public SchemaEvolution deepCopy() {
    return new SchemaEvolution(this);
  }

  @Override
  public void clear() {
    this.schema_evolution_history = null;
  }

  public int getSchema_evolution_historySize() {
    return (this.schema_evolution_history == null) ? 0 : this.schema_evolution_history.size();
  }

  public java.util.Iterator<SchemaEvolutionEntry> getSchema_evolution_historyIterator() {
    return (this.schema_evolution_history == null) ? null : this.schema_evolution_history.iterator();
  }

  public void addToSchema_evolution_history(SchemaEvolutionEntry elem) {
    if (this.schema_evolution_history == null) {
      this.schema_evolution_history = new ArrayList<SchemaEvolutionEntry>();
    }
    this.schema_evolution_history.add(elem);
  }

  public List<SchemaEvolutionEntry> getSchema_evolution_history() {
    return this.schema_evolution_history;
  }

  public SchemaEvolution setSchema_evolution_history(List<SchemaEvolutionEntry> schema_evolution_history) {
    this.schema_evolution_history = schema_evolution_history;
    return this;
  }

  public void unsetSchema_evolution_history() {
    this.schema_evolution_history = null;
  }

  /** Returns true if field schema_evolution_history is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_evolution_history() {
    return this.schema_evolution_history != null;
  }

  public void setSchema_evolution_historyIsSet(boolean value) {
    if (!value) {
      this.schema_evolution_history = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCHEMA_EVOLUTION_HISTORY:
      if (value == null) {
        unsetSchema_evolution_history();
      } else {
        setSchema_evolution_history((List<SchemaEvolutionEntry>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCHEMA_EVOLUTION_HISTORY:
      return getSchema_evolution_history();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCHEMA_EVOLUTION_HISTORY:
      return isSetSchema_evolution_history();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SchemaEvolution)
      return this.equals((SchemaEvolution)that);
    return false;
  }

  public boolean equals(SchemaEvolution that) {
    if (that == null)
      return false;

    boolean this_present_schema_evolution_history = true && this.isSetSchema_evolution_history();
    boolean that_present_schema_evolution_history = true && that.isSetSchema_evolution_history();
    if (this_present_schema_evolution_history || that_present_schema_evolution_history) {
      if (!(this_present_schema_evolution_history && that_present_schema_evolution_history))
        return false;
      if (!this.schema_evolution_history.equals(that.schema_evolution_history))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_schema_evolution_history = true && (isSetSchema_evolution_history());
    list.add(present_schema_evolution_history);
    if (present_schema_evolution_history)
      list.add(schema_evolution_history);

    return list.hashCode();
  }

  @Override
  public int compareTo(SchemaEvolution other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSchema_evolution_history()).compareTo(other.isSetSchema_evolution_history());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_evolution_history()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_evolution_history, other.schema_evolution_history);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SchemaEvolution(");
    boolean first = true;

    sb.append("schema_evolution_history:");
    if (this.schema_evolution_history == null) {
      sb.append("null");
    } else {
      sb.append(this.schema_evolution_history);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (schema_evolution_history == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'schema_evolution_history' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SchemaEvolutionStandardSchemeFactory implements SchemeFactory {
    public SchemaEvolutionStandardScheme getScheme() {
      return new SchemaEvolutionStandardScheme();
    }
  }

  private static class SchemaEvolutionStandardScheme extends StandardScheme<SchemaEvolution> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SchemaEvolution struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCHEMA_EVOLUTION_HISTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                struct.schema_evolution_history = new ArrayList<SchemaEvolutionEntry>(_list34.size);
                SchemaEvolutionEntry _elem35;
                for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                {
                  _elem35 = new SchemaEvolutionEntry();
                  _elem35.read(iprot);
                  struct.schema_evolution_history.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setSchema_evolution_historyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SchemaEvolution struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.schema_evolution_history != null) {
        oprot.writeFieldBegin(SCHEMA_EVOLUTION_HISTORY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.schema_evolution_history.size()));
          for (SchemaEvolutionEntry _iter37 : struct.schema_evolution_history)
          {
            _iter37.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SchemaEvolutionTupleSchemeFactory implements SchemeFactory {
    public SchemaEvolutionTupleScheme getScheme() {
      return new SchemaEvolutionTupleScheme();
    }
  }

  private static class SchemaEvolutionTupleScheme extends TupleScheme<SchemaEvolution> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SchemaEvolution struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.schema_evolution_history.size());
        for (SchemaEvolutionEntry _iter38 : struct.schema_evolution_history)
        {
          _iter38.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SchemaEvolution struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.schema_evolution_history = new ArrayList<SchemaEvolutionEntry>(_list39.size);
        SchemaEvolutionEntry _elem40;
        for (int _i41 = 0; _i41 < _list39.size; ++_i41)
        {
          _elem40 = new SchemaEvolutionEntry();
          _elem40.read(iprot);
          struct.schema_evolution_history.add(_elem40);
        }
      }
      struct.setSchema_evolution_historyIsSet(true);
    }
  }

}

