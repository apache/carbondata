/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Information about a segment, that represents one data load
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class SegmentInfo implements org.apache.thrift.TBase<SegmentInfo, SegmentInfo._Fields>, java.io.Serializable, Cloneable, Comparable<SegmentInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SegmentInfo");

  private static final org.apache.thrift.protocol.TField NUM_COLS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_cols", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_CARDINALITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("column_cardinalities", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SegmentInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SegmentInfoTupleSchemeFactory());
  }

  public int num_cols; // required
  public List<Integer> column_cardinalities; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_COLS((short)1, "num_cols"),
    COLUMN_CARDINALITIES((short)2, "column_cardinalities");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_COLS
          return NUM_COLS;
        case 2: // COLUMN_CARDINALITIES
          return COLUMN_CARDINALITIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_COLS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_COLS, new org.apache.thrift.meta_data.FieldMetaData("num_cols", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN_CARDINALITIES, new org.apache.thrift.meta_data.FieldMetaData("column_cardinalities", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SegmentInfo.class, metaDataMap);
  }

  public SegmentInfo() {
  }

  public SegmentInfo(
    int num_cols,
    List<Integer> column_cardinalities)
  {
    this();
    this.num_cols = num_cols;
    setNum_colsIsSet(true);
    this.column_cardinalities = column_cardinalities;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SegmentInfo(SegmentInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.num_cols = other.num_cols;
    if (other.isSetColumn_cardinalities()) {
      List<Integer> __this__column_cardinalities = new ArrayList<Integer>(other.column_cardinalities);
      this.column_cardinalities = __this__column_cardinalities;
    }
  }

  public SegmentInfo deepCopy() {
    return new SegmentInfo(this);
  }

  @Override
  public void clear() {
    setNum_colsIsSet(false);
    this.num_cols = 0;
    this.column_cardinalities = null;
  }

  public int getNum_cols() {
    return this.num_cols;
  }

  public SegmentInfo setNum_cols(int num_cols) {
    this.num_cols = num_cols;
    setNum_colsIsSet(true);
    return this;
  }

  public void unsetNum_cols() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_COLS_ISSET_ID);
  }

  /** Returns true if field num_cols is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_cols() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_COLS_ISSET_ID);
  }

  public void setNum_colsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_COLS_ISSET_ID, value);
  }

  public int getColumn_cardinalitiesSize() {
    return (this.column_cardinalities == null) ? 0 : this.column_cardinalities.size();
  }

  public java.util.Iterator<Integer> getColumn_cardinalitiesIterator() {
    return (this.column_cardinalities == null) ? null : this.column_cardinalities.iterator();
  }

  public void addToColumn_cardinalities(int elem) {
    if (this.column_cardinalities == null) {
      this.column_cardinalities = new ArrayList<Integer>();
    }
    this.column_cardinalities.add(elem);
  }

  public List<Integer> getColumn_cardinalities() {
    return this.column_cardinalities;
  }

  public SegmentInfo setColumn_cardinalities(List<Integer> column_cardinalities) {
    this.column_cardinalities = column_cardinalities;
    return this;
  }

  public void unsetColumn_cardinalities() {
    this.column_cardinalities = null;
  }

  /** Returns true if field column_cardinalities is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_cardinalities() {
    return this.column_cardinalities != null;
  }

  public void setColumn_cardinalitiesIsSet(boolean value) {
    if (!value) {
      this.column_cardinalities = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_COLS:
      if (value == null) {
        unsetNum_cols();
      } else {
        setNum_cols((Integer)value);
      }
      break;

    case COLUMN_CARDINALITIES:
      if (value == null) {
        unsetColumn_cardinalities();
      } else {
        setColumn_cardinalities((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_COLS:
      return getNum_cols();

    case COLUMN_CARDINALITIES:
      return getColumn_cardinalities();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_COLS:
      return isSetNum_cols();
    case COLUMN_CARDINALITIES:
      return isSetColumn_cardinalities();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SegmentInfo)
      return this.equals((SegmentInfo)that);
    return false;
  }

  public boolean equals(SegmentInfo that) {
    if (that == null)
      return false;

    boolean this_present_num_cols = true;
    boolean that_present_num_cols = true;
    if (this_present_num_cols || that_present_num_cols) {
      if (!(this_present_num_cols && that_present_num_cols))
        return false;
      if (this.num_cols != that.num_cols)
        return false;
    }

    boolean this_present_column_cardinalities = true && this.isSetColumn_cardinalities();
    boolean that_present_column_cardinalities = true && that.isSetColumn_cardinalities();
    if (this_present_column_cardinalities || that_present_column_cardinalities) {
      if (!(this_present_column_cardinalities && that_present_column_cardinalities))
        return false;
      if (!this.column_cardinalities.equals(that.column_cardinalities))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_num_cols = true;
    list.add(present_num_cols);
    if (present_num_cols)
      list.add(num_cols);

    boolean present_column_cardinalities = true && (isSetColumn_cardinalities());
    list.add(present_column_cardinalities);
    if (present_column_cardinalities)
      list.add(column_cardinalities);

    return list.hashCode();
  }

  @Override
  public int compareTo(SegmentInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNum_cols()).compareTo(other.isSetNum_cols());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_cols()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_cols, other.num_cols);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_cardinalities()).compareTo(other.isSetColumn_cardinalities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_cardinalities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_cardinalities, other.column_cardinalities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SegmentInfo(");
    boolean first = true;

    sb.append("num_cols:");
    sb.append(this.num_cols);
    first = false;
    if (!first) sb.append(", ");
    sb.append("column_cardinalities:");
    if (this.column_cardinalities == null) {
      sb.append("null");
    } else {
      sb.append(this.column_cardinalities);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'num_cols' because it's a primitive and you chose the non-beans generator.
    if (column_cardinalities == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_cardinalities' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SegmentInfoStandardSchemeFactory implements SchemeFactory {
    public SegmentInfoStandardScheme getScheme() {
      return new SegmentInfoStandardScheme();
    }
  }

  private static class SegmentInfoStandardScheme extends StandardScheme<SegmentInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SegmentInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_COLS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_cols = iprot.readI32();
              struct.setNum_colsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_CARDINALITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.column_cardinalities = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.column_cardinalities.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setColumn_cardinalitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNum_cols()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_cols' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SegmentInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_COLS_FIELD_DESC);
      oprot.writeI32(struct.num_cols);
      oprot.writeFieldEnd();
      if (struct.column_cardinalities != null) {
        oprot.writeFieldBegin(COLUMN_CARDINALITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.column_cardinalities.size()));
          for (int _iter3 : struct.column_cardinalities)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SegmentInfoTupleSchemeFactory implements SchemeFactory {
    public SegmentInfoTupleScheme getScheme() {
      return new SegmentInfoTupleScheme();
    }
  }

  private static class SegmentInfoTupleScheme extends TupleScheme<SegmentInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SegmentInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.num_cols);
      {
        oprot.writeI32(struct.column_cardinalities.size());
        for (int _iter4 : struct.column_cardinalities)
        {
          oprot.writeI32(_iter4);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SegmentInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.num_cols = iprot.readI32();
      struct.setNum_colsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.column_cardinalities = new ArrayList<Integer>(_list5.size);
        int _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = iprot.readI32();
          struct.column_cardinalities.add(_elem6);
        }
      }
      struct.setColumn_cardinalitiesIsSet(true);
    }
  }

}

