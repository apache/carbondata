/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Description of One Schema Change, contains list of added columns and deleted columns
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class SchemaEvolutionEntry implements org.apache.thrift.TBase<SchemaEvolutionEntry, SchemaEvolutionEntry._Fields>, java.io.Serializable, Cloneable, Comparable<SchemaEvolutionEntry> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SchemaEvolutionEntry");

  private static final org.apache.thrift.protocol.TField TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("time_stamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ADDED_FIELD_DESC = new org.apache.thrift.protocol.TField("added", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField REMOVED_FIELD_DESC = new org.apache.thrift.protocol.TField("removed", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SchemaEvolutionEntryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SchemaEvolutionEntryTupleSchemeFactory());
  }

  public long time_stamp; // required
  public List<ColumnSchema> added; // optional
  public List<ColumnSchema> removed; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME_STAMP((short)1, "time_stamp"),
    ADDED((short)2, "added"),
    REMOVED((short)3, "removed");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME_STAMP
          return TIME_STAMP;
        case 2: // ADDED
          return ADDED;
        case 3: // REMOVED
          return REMOVED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_STAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ADDED,_Fields.REMOVED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("time_stamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ADDED, new org.apache.thrift.meta_data.FieldMetaData("added", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnSchema.class))));
    tmpMap.put(_Fields.REMOVED, new org.apache.thrift.meta_data.FieldMetaData("removed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnSchema.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SchemaEvolutionEntry.class, metaDataMap);
  }

  public SchemaEvolutionEntry() {
  }

  public SchemaEvolutionEntry(
    long time_stamp)
  {
    this();
    this.time_stamp = time_stamp;
    setTime_stampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SchemaEvolutionEntry(SchemaEvolutionEntry other) {
    __isset_bitfield = other.__isset_bitfield;
    this.time_stamp = other.time_stamp;
    if (other.isSetAdded()) {
      List<ColumnSchema> __this__added = new ArrayList<ColumnSchema>(other.added.size());
      for (ColumnSchema other_element : other.added) {
        __this__added.add(new ColumnSchema(other_element));
      }
      this.added = __this__added;
    }
    if (other.isSetRemoved()) {
      List<ColumnSchema> __this__removed = new ArrayList<ColumnSchema>(other.removed.size());
      for (ColumnSchema other_element : other.removed) {
        __this__removed.add(new ColumnSchema(other_element));
      }
      this.removed = __this__removed;
    }
  }

  public SchemaEvolutionEntry deepCopy() {
    return new SchemaEvolutionEntry(this);
  }

  @Override
  public void clear() {
    setTime_stampIsSet(false);
    this.time_stamp = 0;
    this.added = null;
    this.removed = null;
  }

  public long getTime_stamp() {
    return this.time_stamp;
  }

  public SchemaEvolutionEntry setTime_stamp(long time_stamp) {
    this.time_stamp = time_stamp;
    setTime_stampIsSet(true);
    return this;
  }

  public void unsetTime_stamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_STAMP_ISSET_ID);
  }

  /** Returns true if field time_stamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_stamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_STAMP_ISSET_ID);
  }

  public void setTime_stampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_STAMP_ISSET_ID, value);
  }

  public int getAddedSize() {
    return (this.added == null) ? 0 : this.added.size();
  }

  public java.util.Iterator<ColumnSchema> getAddedIterator() {
    return (this.added == null) ? null : this.added.iterator();
  }

  public void addToAdded(ColumnSchema elem) {
    if (this.added == null) {
      this.added = new ArrayList<ColumnSchema>();
    }
    this.added.add(elem);
  }

  public List<ColumnSchema> getAdded() {
    return this.added;
  }

  public SchemaEvolutionEntry setAdded(List<ColumnSchema> added) {
    this.added = added;
    return this;
  }

  public void unsetAdded() {
    this.added = null;
  }

  /** Returns true if field added is set (has been assigned a value) and false otherwise */
  public boolean isSetAdded() {
    return this.added != null;
  }

  public void setAddedIsSet(boolean value) {
    if (!value) {
      this.added = null;
    }
  }

  public int getRemovedSize() {
    return (this.removed == null) ? 0 : this.removed.size();
  }

  public java.util.Iterator<ColumnSchema> getRemovedIterator() {
    return (this.removed == null) ? null : this.removed.iterator();
  }

  public void addToRemoved(ColumnSchema elem) {
    if (this.removed == null) {
      this.removed = new ArrayList<ColumnSchema>();
    }
    this.removed.add(elem);
  }

  public List<ColumnSchema> getRemoved() {
    return this.removed;
  }

  public SchemaEvolutionEntry setRemoved(List<ColumnSchema> removed) {
    this.removed = removed;
    return this;
  }

  public void unsetRemoved() {
    this.removed = null;
  }

  /** Returns true if field removed is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoved() {
    return this.removed != null;
  }

  public void setRemovedIsSet(boolean value) {
    if (!value) {
      this.removed = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIME_STAMP:
      if (value == null) {
        unsetTime_stamp();
      } else {
        setTime_stamp((Long)value);
      }
      break;

    case ADDED:
      if (value == null) {
        unsetAdded();
      } else {
        setAdded((List<ColumnSchema>)value);
      }
      break;

    case REMOVED:
      if (value == null) {
        unsetRemoved();
      } else {
        setRemoved((List<ColumnSchema>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME_STAMP:
      return getTime_stamp();

    case ADDED:
      return getAdded();

    case REMOVED:
      return getRemoved();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIME_STAMP:
      return isSetTime_stamp();
    case ADDED:
      return isSetAdded();
    case REMOVED:
      return isSetRemoved();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SchemaEvolutionEntry)
      return this.equals((SchemaEvolutionEntry)that);
    return false;
  }

  public boolean equals(SchemaEvolutionEntry that) {
    if (that == null)
      return false;

    boolean this_present_time_stamp = true;
    boolean that_present_time_stamp = true;
    if (this_present_time_stamp || that_present_time_stamp) {
      if (!(this_present_time_stamp && that_present_time_stamp))
        return false;
      if (this.time_stamp != that.time_stamp)
        return false;
    }

    boolean this_present_added = true && this.isSetAdded();
    boolean that_present_added = true && that.isSetAdded();
    if (this_present_added || that_present_added) {
      if (!(this_present_added && that_present_added))
        return false;
      if (!this.added.equals(that.added))
        return false;
    }

    boolean this_present_removed = true && this.isSetRemoved();
    boolean that_present_removed = true && that.isSetRemoved();
    if (this_present_removed || that_present_removed) {
      if (!(this_present_removed && that_present_removed))
        return false;
      if (!this.removed.equals(that.removed))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_time_stamp = true;
    list.add(present_time_stamp);
    if (present_time_stamp)
      list.add(time_stamp);

    boolean present_added = true && (isSetAdded());
    list.add(present_added);
    if (present_added)
      list.add(added);

    boolean present_removed = true && (isSetRemoved());
    list.add(present_removed);
    if (present_removed)
      list.add(removed);

    return list.hashCode();
  }

  @Override
  public int compareTo(SchemaEvolutionEntry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTime_stamp()).compareTo(other.isSetTime_stamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_stamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_stamp, other.time_stamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdded()).compareTo(other.isSetAdded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.added, other.added);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoved()).compareTo(other.isSetRemoved());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoved()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.removed, other.removed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SchemaEvolutionEntry(");
    boolean first = true;

    sb.append("time_stamp:");
    sb.append(this.time_stamp);
    first = false;
    if (isSetAdded()) {
      if (!first) sb.append(", ");
      sb.append("added:");
      if (this.added == null) {
        sb.append("null");
      } else {
        sb.append(this.added);
      }
      first = false;
    }
    if (isSetRemoved()) {
      if (!first) sb.append(", ");
      sb.append("removed:");
      if (this.removed == null) {
        sb.append("null");
      } else {
        sb.append(this.removed);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'time_stamp' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SchemaEvolutionEntryStandardSchemeFactory implements SchemeFactory {
    public SchemaEvolutionEntryStandardScheme getScheme() {
      return new SchemaEvolutionEntryStandardScheme();
    }
  }

  private static class SchemaEvolutionEntryStandardScheme extends StandardScheme<SchemaEvolutionEntry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SchemaEvolutionEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME_STAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time_stamp = iprot.readI64();
              struct.setTime_stampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ADDED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.added = new ArrayList<ColumnSchema>(_list18.size);
                ColumnSchema _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = new ColumnSchema();
                  _elem19.read(iprot);
                  struct.added.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setAddedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMOVED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.removed = new ArrayList<ColumnSchema>(_list21.size);
                ColumnSchema _elem22;
                for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                {
                  _elem22 = new ColumnSchema();
                  _elem22.read(iprot);
                  struct.removed.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setRemovedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTime_stamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'time_stamp' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SchemaEvolutionEntry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIME_STAMP_FIELD_DESC);
      oprot.writeI64(struct.time_stamp);
      oprot.writeFieldEnd();
      if (struct.added != null) {
        if (struct.isSetAdded()) {
          oprot.writeFieldBegin(ADDED_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.added.size()));
            for (ColumnSchema _iter24 : struct.added)
            {
              _iter24.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.removed != null) {
        if (struct.isSetRemoved()) {
          oprot.writeFieldBegin(REMOVED_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.removed.size()));
            for (ColumnSchema _iter25 : struct.removed)
            {
              _iter25.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SchemaEvolutionEntryTupleSchemeFactory implements SchemeFactory {
    public SchemaEvolutionEntryTupleScheme getScheme() {
      return new SchemaEvolutionEntryTupleScheme();
    }
  }

  private static class SchemaEvolutionEntryTupleScheme extends TupleScheme<SchemaEvolutionEntry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SchemaEvolutionEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.time_stamp);
      BitSet optionals = new BitSet();
      if (struct.isSetAdded()) {
        optionals.set(0);
      }
      if (struct.isSetRemoved()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAdded()) {
        {
          oprot.writeI32(struct.added.size());
          for (ColumnSchema _iter26 : struct.added)
          {
            _iter26.write(oprot);
          }
        }
      }
      if (struct.isSetRemoved()) {
        {
          oprot.writeI32(struct.removed.size());
          for (ColumnSchema _iter27 : struct.removed)
          {
            _iter27.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SchemaEvolutionEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.time_stamp = iprot.readI64();
      struct.setTime_stampIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.added = new ArrayList<ColumnSchema>(_list28.size);
          ColumnSchema _elem29;
          for (int _i30 = 0; _i30 < _list28.size; ++_i30)
          {
            _elem29 = new ColumnSchema();
            _elem29.read(iprot);
            struct.added.add(_elem29);
          }
        }
        struct.setAddedIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.removed = new ArrayList<ColumnSchema>(_list31.size);
          ColumnSchema _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = new ColumnSchema();
            _elem32.read(iprot);
            struct.removed.add(_elem32);
          }
        }
        struct.setRemovedIsSet(true);
      }
    }
  }

}

