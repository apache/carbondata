/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Header for appendable carbon file
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class FileHeader implements org.apache.thrift.TBase<FileHeader, FileHeader._Fields>, java.io.Serializable, Cloneable, Comparable<FileHeader> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileHeader");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("table_columns", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FileHeaderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FileHeaderTupleSchemeFactory());
  }

  public int version; // required
  public List<org.apache.carbondata.format.ColumnSchema> table_columns; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    TABLE_COLUMNS((short)2, "table_columns");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // TABLE_COLUMNS
          return TABLE_COLUMNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TABLE_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("table_columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.carbondata.format.ColumnSchema.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileHeader.class, metaDataMap);
  }

  public FileHeader() {
  }

  public FileHeader(
    int version,
    List<org.apache.carbondata.format.ColumnSchema> table_columns)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
    this.table_columns = table_columns;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileHeader(FileHeader other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    if (other.isSetTable_columns()) {
      List<org.apache.carbondata.format.ColumnSchema> __this__table_columns = new ArrayList<org.apache.carbondata.format.ColumnSchema>(other.table_columns.size());
      for (org.apache.carbondata.format.ColumnSchema other_element : other.table_columns) {
        __this__table_columns.add(new org.apache.carbondata.format.ColumnSchema(other_element));
      }
      this.table_columns = __this__table_columns;
    }
  }

  public FileHeader deepCopy() {
    return new FileHeader(this);
  }

  @Override
  public void clear() {
    setVersionIsSet(false);
    this.version = 0;
    this.table_columns = null;
  }

  public int getVersion() {
    return this.version;
  }

  public FileHeader setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getTable_columnsSize() {
    return (this.table_columns == null) ? 0 : this.table_columns.size();
  }

  public java.util.Iterator<org.apache.carbondata.format.ColumnSchema> getTable_columnsIterator() {
    return (this.table_columns == null) ? null : this.table_columns.iterator();
  }

  public void addToTable_columns(org.apache.carbondata.format.ColumnSchema elem) {
    if (this.table_columns == null) {
      this.table_columns = new ArrayList<org.apache.carbondata.format.ColumnSchema>();
    }
    this.table_columns.add(elem);
  }

  public List<org.apache.carbondata.format.ColumnSchema> getTable_columns() {
    return this.table_columns;
  }

  public FileHeader setTable_columns(List<org.apache.carbondata.format.ColumnSchema> table_columns) {
    this.table_columns = table_columns;
    return this;
  }

  public void unsetTable_columns() {
    this.table_columns = null;
  }

  /** Returns true if field table_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_columns() {
    return this.table_columns != null;
  }

  public void setTable_columnsIsSet(boolean value) {
    if (!value) {
      this.table_columns = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case TABLE_COLUMNS:
      if (value == null) {
        unsetTable_columns();
      } else {
        setTable_columns((List<org.apache.carbondata.format.ColumnSchema>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case TABLE_COLUMNS:
      return getTable_columns();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case TABLE_COLUMNS:
      return isSetTable_columns();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileHeader)
      return this.equals((FileHeader)that);
    return false;
  }

  public boolean equals(FileHeader that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_table_columns = true && this.isSetTable_columns();
    boolean that_present_table_columns = true && that.isSetTable_columns();
    if (this_present_table_columns || that_present_table_columns) {
      if (!(this_present_table_columns && that_present_table_columns))
        return false;
      if (!this.table_columns.equals(that.table_columns))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_table_columns = true && (isSetTable_columns());
    list.add(present_table_columns);
    if (present_table_columns)
      list.add(table_columns);

    return list.hashCode();
  }

  @Override
  public int compareTo(FileHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_columns()).compareTo(other.isSetTable_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_columns, other.table_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileHeader(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("table_columns:");
    if (this.table_columns == null) {
      sb.append("null");
    } else {
      sb.append(this.table_columns);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
    if (table_columns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_columns' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileHeaderStandardSchemeFactory implements SchemeFactory {
    public FileHeaderStandardScheme getScheme() {
      return new FileHeaderStandardScheme();
    }
  }

  private static class FileHeaderStandardScheme extends StandardScheme<FileHeader> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.table_columns = new ArrayList<org.apache.carbondata.format.ColumnSchema>(_list80.size);
                org.apache.carbondata.format.ColumnSchema _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = new org.apache.carbondata.format.ColumnSchema();
                  _elem81.read(iprot);
                  struct.table_columns.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setTable_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileHeader struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      if (struct.table_columns != null) {
        oprot.writeFieldBegin(TABLE_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.table_columns.size()));
          for (org.apache.carbondata.format.ColumnSchema _iter83 : struct.table_columns)
          {
            _iter83.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileHeaderTupleSchemeFactory implements SchemeFactory {
    public FileHeaderTupleScheme getScheme() {
      return new FileHeaderTupleScheme();
    }
  }

  private static class FileHeaderTupleScheme extends TupleScheme<FileHeader> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.version);
      {
        oprot.writeI32(struct.table_columns.size());
        for (org.apache.carbondata.format.ColumnSchema _iter84 : struct.table_columns)
        {
          _iter84.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.version = iprot.readI32();
      struct.setVersionIsSet(true);
      {
        org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.table_columns = new ArrayList<org.apache.carbondata.format.ColumnSchema>(_list85.size);
        org.apache.carbondata.format.ColumnSchema _elem86;
        for (int _i87 = 0; _i87 < _list85.size; ++_i87)
        {
          _elem86 = new org.apache.carbondata.format.ColumnSchema();
          _elem86.read(iprot);
          struct.table_columns.add(_elem86);
        }
      }
      struct.setTable_columnsIsSet(true);
    }
  }

}

