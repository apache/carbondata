/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Header for one blocklet in appendable carbon file
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class BlockletHeader implements org.apache.thrift.TBase<BlockletHeader, BlockletHeader._Fields>, java.io.Serializable, Cloneable, Comparable<BlockletHeader> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlockletHeader");

  private static final org.apache.thrift.protocol.TField BLOCKLET_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("blocklet_length", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MUTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("mutation", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BLOCKLET_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("blocklet_index", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField BLOCKLET_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("blocklet_info", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DICTIONARY_FIELD_DESC = new org.apache.thrift.protocol.TField("dictionary", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BlockletHeaderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BlockletHeaderTupleSchemeFactory());
  }

  public int blocklet_length; // required
  /**
   * 
   * @see MutationType
   */
  public MutationType mutation; // required
  public BlockletIndex blocklet_index; // required
  public BlockletInfo blocklet_info; // required
  public org.apache.carbondata.format.ColumnDictionaryChunk dictionary; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BLOCKLET_LENGTH((short)1, "blocklet_length"),
    /**
     * 
     * @see MutationType
     */
    MUTATION((short)2, "mutation"),
    BLOCKLET_INDEX((short)3, "blocklet_index"),
    BLOCKLET_INFO((short)4, "blocklet_info"),
    DICTIONARY((short)5, "dictionary");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BLOCKLET_LENGTH
          return BLOCKLET_LENGTH;
        case 2: // MUTATION
          return MUTATION;
        case 3: // BLOCKLET_INDEX
          return BLOCKLET_INDEX;
        case 4: // BLOCKLET_INFO
          return BLOCKLET_INFO;
        case 5: // DICTIONARY
          return DICTIONARY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BLOCKLET_LENGTH_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DICTIONARY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BLOCKLET_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("blocklet_length", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MUTATION, new org.apache.thrift.meta_data.FieldMetaData("mutation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MutationType.class)));
    tmpMap.put(_Fields.BLOCKLET_INDEX, new org.apache.thrift.meta_data.FieldMetaData("blocklet_index", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BlockletIndex.class)));
    tmpMap.put(_Fields.BLOCKLET_INFO, new org.apache.thrift.meta_data.FieldMetaData("blocklet_info", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BlockletInfo.class)));
    tmpMap.put(_Fields.DICTIONARY, new org.apache.thrift.meta_data.FieldMetaData("dictionary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.carbondata.format.ColumnDictionaryChunk.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlockletHeader.class, metaDataMap);
  }

  public BlockletHeader() {
  }

  public BlockletHeader(
    int blocklet_length,
    MutationType mutation,
    BlockletIndex blocklet_index,
    BlockletInfo blocklet_info)
  {
    this();
    this.blocklet_length = blocklet_length;
    setBlocklet_lengthIsSet(true);
    this.mutation = mutation;
    this.blocklet_index = blocklet_index;
    this.blocklet_info = blocklet_info;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlockletHeader(BlockletHeader other) {
    __isset_bitfield = other.__isset_bitfield;
    this.blocklet_length = other.blocklet_length;
    if (other.isSetMutation()) {
      this.mutation = other.mutation;
    }
    if (other.isSetBlocklet_index()) {
      this.blocklet_index = new BlockletIndex(other.blocklet_index);
    }
    if (other.isSetBlocklet_info()) {
      this.blocklet_info = new BlockletInfo(other.blocklet_info);
    }
    if (other.isSetDictionary()) {
      this.dictionary = new org.apache.carbondata.format.ColumnDictionaryChunk(other.dictionary);
    }
  }

  public BlockletHeader deepCopy() {
    return new BlockletHeader(this);
  }

  @Override
  public void clear() {
    setBlocklet_lengthIsSet(false);
    this.blocklet_length = 0;
    this.mutation = null;
    this.blocklet_index = null;
    this.blocklet_info = null;
    this.dictionary = null;
  }

  public int getBlocklet_length() {
    return this.blocklet_length;
  }

  public BlockletHeader setBlocklet_length(int blocklet_length) {
    this.blocklet_length = blocklet_length;
    setBlocklet_lengthIsSet(true);
    return this;
  }

  public void unsetBlocklet_length() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKLET_LENGTH_ISSET_ID);
  }

  /** Returns true if field blocklet_length is set (has been assigned a value) and false otherwise */
  public boolean isSetBlocklet_length() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCKLET_LENGTH_ISSET_ID);
  }

  public void setBlocklet_lengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKLET_LENGTH_ISSET_ID, value);
  }

  /**
   * 
   * @see MutationType
   */
  public MutationType getMutation() {
    return this.mutation;
  }

  /**
   * 
   * @see MutationType
   */
  public BlockletHeader setMutation(MutationType mutation) {
    this.mutation = mutation;
    return this;
  }

  public void unsetMutation() {
    this.mutation = null;
  }

  /** Returns true if field mutation is set (has been assigned a value) and false otherwise */
  public boolean isSetMutation() {
    return this.mutation != null;
  }

  public void setMutationIsSet(boolean value) {
    if (!value) {
      this.mutation = null;
    }
  }

  public BlockletIndex getBlocklet_index() {
    return this.blocklet_index;
  }

  public BlockletHeader setBlocklet_index(BlockletIndex blocklet_index) {
    this.blocklet_index = blocklet_index;
    return this;
  }

  public void unsetBlocklet_index() {
    this.blocklet_index = null;
  }

  /** Returns true if field blocklet_index is set (has been assigned a value) and false otherwise */
  public boolean isSetBlocklet_index() {
    return this.blocklet_index != null;
  }

  public void setBlocklet_indexIsSet(boolean value) {
    if (!value) {
      this.blocklet_index = null;
    }
  }

  public BlockletInfo getBlocklet_info() {
    return this.blocklet_info;
  }

  public BlockletHeader setBlocklet_info(BlockletInfo blocklet_info) {
    this.blocklet_info = blocklet_info;
    return this;
  }

  public void unsetBlocklet_info() {
    this.blocklet_info = null;
  }

  /** Returns true if field blocklet_info is set (has been assigned a value) and false otherwise */
  public boolean isSetBlocklet_info() {
    return this.blocklet_info != null;
  }

  public void setBlocklet_infoIsSet(boolean value) {
    if (!value) {
      this.blocklet_info = null;
    }
  }

  public org.apache.carbondata.format.ColumnDictionaryChunk getDictionary() {
    return this.dictionary;
  }

  public BlockletHeader setDictionary(org.apache.carbondata.format.ColumnDictionaryChunk dictionary) {
    this.dictionary = dictionary;
    return this;
  }

  public void unsetDictionary() {
    this.dictionary = null;
  }

  /** Returns true if field dictionary is set (has been assigned a value) and false otherwise */
  public boolean isSetDictionary() {
    return this.dictionary != null;
  }

  public void setDictionaryIsSet(boolean value) {
    if (!value) {
      this.dictionary = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BLOCKLET_LENGTH:
      if (value == null) {
        unsetBlocklet_length();
      } else {
        setBlocklet_length((Integer)value);
      }
      break;

    case MUTATION:
      if (value == null) {
        unsetMutation();
      } else {
        setMutation((MutationType)value);
      }
      break;

    case BLOCKLET_INDEX:
      if (value == null) {
        unsetBlocklet_index();
      } else {
        setBlocklet_index((BlockletIndex)value);
      }
      break;

    case BLOCKLET_INFO:
      if (value == null) {
        unsetBlocklet_info();
      } else {
        setBlocklet_info((BlockletInfo)value);
      }
      break;

    case DICTIONARY:
      if (value == null) {
        unsetDictionary();
      } else {
        setDictionary((org.apache.carbondata.format.ColumnDictionaryChunk)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BLOCKLET_LENGTH:
      return getBlocklet_length();

    case MUTATION:
      return getMutation();

    case BLOCKLET_INDEX:
      return getBlocklet_index();

    case BLOCKLET_INFO:
      return getBlocklet_info();

    case DICTIONARY:
      return getDictionary();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BLOCKLET_LENGTH:
      return isSetBlocklet_length();
    case MUTATION:
      return isSetMutation();
    case BLOCKLET_INDEX:
      return isSetBlocklet_index();
    case BLOCKLET_INFO:
      return isSetBlocklet_info();
    case DICTIONARY:
      return isSetDictionary();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlockletHeader)
      return this.equals((BlockletHeader)that);
    return false;
  }

  public boolean equals(BlockletHeader that) {
    if (that == null)
      return false;

    boolean this_present_blocklet_length = true;
    boolean that_present_blocklet_length = true;
    if (this_present_blocklet_length || that_present_blocklet_length) {
      if (!(this_present_blocklet_length && that_present_blocklet_length))
        return false;
      if (this.blocklet_length != that.blocklet_length)
        return false;
    }

    boolean this_present_mutation = true && this.isSetMutation();
    boolean that_present_mutation = true && that.isSetMutation();
    if (this_present_mutation || that_present_mutation) {
      if (!(this_present_mutation && that_present_mutation))
        return false;
      if (!this.mutation.equals(that.mutation))
        return false;
    }

    boolean this_present_blocklet_index = true && this.isSetBlocklet_index();
    boolean that_present_blocklet_index = true && that.isSetBlocklet_index();
    if (this_present_blocklet_index || that_present_blocklet_index) {
      if (!(this_present_blocklet_index && that_present_blocklet_index))
        return false;
      if (!this.blocklet_index.equals(that.blocklet_index))
        return false;
    }

    boolean this_present_blocklet_info = true && this.isSetBlocklet_info();
    boolean that_present_blocklet_info = true && that.isSetBlocklet_info();
    if (this_present_blocklet_info || that_present_blocklet_info) {
      if (!(this_present_blocklet_info && that_present_blocklet_info))
        return false;
      if (!this.blocklet_info.equals(that.blocklet_info))
        return false;
    }

    boolean this_present_dictionary = true && this.isSetDictionary();
    boolean that_present_dictionary = true && that.isSetDictionary();
    if (this_present_dictionary || that_present_dictionary) {
      if (!(this_present_dictionary && that_present_dictionary))
        return false;
      if (!this.dictionary.equals(that.dictionary))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_blocklet_length = true;
    list.add(present_blocklet_length);
    if (present_blocklet_length)
      list.add(blocklet_length);

    boolean present_mutation = true && (isSetMutation());
    list.add(present_mutation);
    if (present_mutation)
      list.add(mutation.getValue());

    boolean present_blocklet_index = true && (isSetBlocklet_index());
    list.add(present_blocklet_index);
    if (present_blocklet_index)
      list.add(blocklet_index);

    boolean present_blocklet_info = true && (isSetBlocklet_info());
    list.add(present_blocklet_info);
    if (present_blocklet_info)
      list.add(blocklet_info);

    boolean present_dictionary = true && (isSetDictionary());
    list.add(present_dictionary);
    if (present_dictionary)
      list.add(dictionary);

    return list.hashCode();
  }

  @Override
  public int compareTo(BlockletHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBlocklet_length()).compareTo(other.isSetBlocklet_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocklet_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocklet_length, other.blocklet_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMutation()).compareTo(other.isSetMutation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMutation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutation, other.mutation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlocklet_index()).compareTo(other.isSetBlocklet_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocklet_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocklet_index, other.blocklet_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlocklet_info()).compareTo(other.isSetBlocklet_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocklet_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocklet_info, other.blocklet_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDictionary()).compareTo(other.isSetDictionary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDictionary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictionary, other.dictionary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlockletHeader(");
    boolean first = true;

    sb.append("blocklet_length:");
    sb.append(this.blocklet_length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mutation:");
    if (this.mutation == null) {
      sb.append("null");
    } else {
      sb.append(this.mutation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blocklet_index:");
    if (this.blocklet_index == null) {
      sb.append("null");
    } else {
      sb.append(this.blocklet_index);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blocklet_info:");
    if (this.blocklet_info == null) {
      sb.append("null");
    } else {
      sb.append(this.blocklet_info);
    }
    first = false;
    if (isSetDictionary()) {
      if (!first) sb.append(", ");
      sb.append("dictionary:");
      if (this.dictionary == null) {
        sb.append("null");
      } else {
        sb.append(this.dictionary);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'blocklet_length' because it's a primitive and you chose the non-beans generator.
    if (mutation == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mutation' was not present! Struct: " + toString());
    }
    if (blocklet_index == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'blocklet_index' was not present! Struct: " + toString());
    }
    if (blocklet_info == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'blocklet_info' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (blocklet_index != null) {
      blocklet_index.validate();
    }
    if (blocklet_info != null) {
      blocklet_info.validate();
    }
    if (dictionary != null) {
      dictionary.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BlockletHeaderStandardSchemeFactory implements SchemeFactory {
    public BlockletHeaderStandardScheme getScheme() {
      return new BlockletHeaderStandardScheme();
    }
  }

  private static class BlockletHeaderStandardScheme extends StandardScheme<BlockletHeader> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BlockletHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BLOCKLET_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.blocklet_length = iprot.readI32();
              struct.setBlocklet_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MUTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mutation = org.apache.carbondata.format.MutationType.findByValue(iprot.readI32());
              struct.setMutationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BLOCKLET_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.blocklet_index = new BlockletIndex();
              struct.blocklet_index.read(iprot);
              struct.setBlocklet_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BLOCKLET_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.blocklet_info = new BlockletInfo();
              struct.blocklet_info.read(iprot);
              struct.setBlocklet_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DICTIONARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dictionary = new org.apache.carbondata.format.ColumnDictionaryChunk();
              struct.dictionary.read(iprot);
              struct.setDictionaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBlocklet_length()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'blocklet_length' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BlockletHeader struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BLOCKLET_LENGTH_FIELD_DESC);
      oprot.writeI32(struct.blocklet_length);
      oprot.writeFieldEnd();
      if (struct.mutation != null) {
        oprot.writeFieldBegin(MUTATION_FIELD_DESC);
        oprot.writeI32(struct.mutation.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.blocklet_index != null) {
        oprot.writeFieldBegin(BLOCKLET_INDEX_FIELD_DESC);
        struct.blocklet_index.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.blocklet_info != null) {
        oprot.writeFieldBegin(BLOCKLET_INFO_FIELD_DESC);
        struct.blocklet_info.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.dictionary != null) {
        if (struct.isSetDictionary()) {
          oprot.writeFieldBegin(DICTIONARY_FIELD_DESC);
          struct.dictionary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BlockletHeaderTupleSchemeFactory implements SchemeFactory {
    public BlockletHeaderTupleScheme getScheme() {
      return new BlockletHeaderTupleScheme();
    }
  }

  private static class BlockletHeaderTupleScheme extends TupleScheme<BlockletHeader> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BlockletHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.blocklet_length);
      oprot.writeI32(struct.mutation.getValue());
      struct.blocklet_index.write(oprot);
      struct.blocklet_info.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetDictionary()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetDictionary()) {
        struct.dictionary.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BlockletHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.blocklet_length = iprot.readI32();
      struct.setBlocklet_lengthIsSet(true);
      struct.mutation = org.apache.carbondata.format.MutationType.findByValue(iprot.readI32());
      struct.setMutationIsSet(true);
      struct.blocklet_index = new BlockletIndex();
      struct.blocklet_index.read(iprot);
      struct.setBlocklet_indexIsSet(true);
      struct.blocklet_info = new BlockletInfo();
      struct.blocklet_info.read(iprot);
      struct.setBlocklet_infoIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.dictionary = new org.apache.carbondata.format.ColumnDictionaryChunk();
        struct.dictionary.read(iprot);
        struct.setDictionaryIsSet(true);
      }
    }
  }

}

