/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class SegmentStatus implements org.apache.thrift.TBase<SegmentStatus, SegmentStatus._Fields>, java.io.Serializable, Cloneable, Comparable<SegmentStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SegmentStatus");

  private static final org.apache.thrift.protocol.TField CURRENT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("current_state", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CREATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("creation_time", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LATEST_STATE_CHANGE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("latest_state_change_time", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SegmentStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SegmentStatusTupleSchemeFactory());
  }

  /**
   * 
   * @see SegmentState
   */
  public SegmentState current_state; // required
  public long creation_time; // required
  public long latest_state_change_time; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see SegmentState
     */
    CURRENT_STATE((short)1, "current_state"),
    CREATION_TIME((short)2, "creation_time"),
    LATEST_STATE_CHANGE_TIME((short)3, "latest_state_change_time");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CURRENT_STATE
          return CURRENT_STATE;
        case 2: // CREATION_TIME
          return CREATION_TIME;
        case 3: // LATEST_STATE_CHANGE_TIME
          return LATEST_STATE_CHANGE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATION_TIME_ISSET_ID = 0;
  private static final int __LATEST_STATE_CHANGE_TIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CURRENT_STATE, new org.apache.thrift.meta_data.FieldMetaData("current_state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SegmentState.class)));
    tmpMap.put(_Fields.CREATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("creation_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LATEST_STATE_CHANGE_TIME, new org.apache.thrift.meta_data.FieldMetaData("latest_state_change_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SegmentStatus.class, metaDataMap);
  }

  public SegmentStatus() {
  }

  public SegmentStatus(
    SegmentState current_state,
    long creation_time,
    long latest_state_change_time)
  {
    this();
    this.current_state = current_state;
    this.creation_time = creation_time;
    setCreation_timeIsSet(true);
    this.latest_state_change_time = latest_state_change_time;
    setLatest_state_change_timeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SegmentStatus(SegmentStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCurrent_state()) {
      this.current_state = other.current_state;
    }
    this.creation_time = other.creation_time;
    this.latest_state_change_time = other.latest_state_change_time;
  }

  public SegmentStatus deepCopy() {
    return new SegmentStatus(this);
  }

  @Override
  public void clear() {
    this.current_state = null;
    setCreation_timeIsSet(false);
    this.creation_time = 0;
    setLatest_state_change_timeIsSet(false);
    this.latest_state_change_time = 0;
  }

  /**
   * 
   * @see SegmentState
   */
  public SegmentState getCurrent_state() {
    return this.current_state;
  }

  /**
   * 
   * @see SegmentState
   */
  public SegmentStatus setCurrent_state(SegmentState current_state) {
    this.current_state = current_state;
    return this;
  }

  public void unsetCurrent_state() {
    this.current_state = null;
  }

  /** Returns true if field current_state is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_state() {
    return this.current_state != null;
  }

  public void setCurrent_stateIsSet(boolean value) {
    if (!value) {
      this.current_state = null;
    }
  }

  public long getCreation_time() {
    return this.creation_time;
  }

  public SegmentStatus setCreation_time(long creation_time) {
    this.creation_time = creation_time;
    setCreation_timeIsSet(true);
    return this;
  }

  public void unsetCreation_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATION_TIME_ISSET_ID);
  }

  /** Returns true if field creation_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreation_time() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATION_TIME_ISSET_ID);
  }

  public void setCreation_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATION_TIME_ISSET_ID, value);
  }

  public long getLatest_state_change_time() {
    return this.latest_state_change_time;
  }

  public SegmentStatus setLatest_state_change_time(long latest_state_change_time) {
    this.latest_state_change_time = latest_state_change_time;
    setLatest_state_change_timeIsSet(true);
    return this;
  }

  public void unsetLatest_state_change_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATEST_STATE_CHANGE_TIME_ISSET_ID);
  }

  /** Returns true if field latest_state_change_time is set (has been assigned a value) and false otherwise */
  public boolean isSetLatest_state_change_time() {
    return EncodingUtils.testBit(__isset_bitfield, __LATEST_STATE_CHANGE_TIME_ISSET_ID);
  }

  public void setLatest_state_change_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATEST_STATE_CHANGE_TIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CURRENT_STATE:
      if (value == null) {
        unsetCurrent_state();
      } else {
        setCurrent_state((SegmentState)value);
      }
      break;

    case CREATION_TIME:
      if (value == null) {
        unsetCreation_time();
      } else {
        setCreation_time((Long)value);
      }
      break;

    case LATEST_STATE_CHANGE_TIME:
      if (value == null) {
        unsetLatest_state_change_time();
      } else {
        setLatest_state_change_time((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CURRENT_STATE:
      return getCurrent_state();

    case CREATION_TIME:
      return getCreation_time();

    case LATEST_STATE_CHANGE_TIME:
      return getLatest_state_change_time();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CURRENT_STATE:
      return isSetCurrent_state();
    case CREATION_TIME:
      return isSetCreation_time();
    case LATEST_STATE_CHANGE_TIME:
      return isSetLatest_state_change_time();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SegmentStatus)
      return this.equals((SegmentStatus)that);
    return false;
  }

  public boolean equals(SegmentStatus that) {
    if (that == null)
      return false;

    boolean this_present_current_state = true && this.isSetCurrent_state();
    boolean that_present_current_state = true && that.isSetCurrent_state();
    if (this_present_current_state || that_present_current_state) {
      if (!(this_present_current_state && that_present_current_state))
        return false;
      if (!this.current_state.equals(that.current_state))
        return false;
    }

    boolean this_present_creation_time = true;
    boolean that_present_creation_time = true;
    if (this_present_creation_time || that_present_creation_time) {
      if (!(this_present_creation_time && that_present_creation_time))
        return false;
      if (this.creation_time != that.creation_time)
        return false;
    }

    boolean this_present_latest_state_change_time = true;
    boolean that_present_latest_state_change_time = true;
    if (this_present_latest_state_change_time || that_present_latest_state_change_time) {
      if (!(this_present_latest_state_change_time && that_present_latest_state_change_time))
        return false;
      if (this.latest_state_change_time != that.latest_state_change_time)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_current_state = true && (isSetCurrent_state());
    list.add(present_current_state);
    if (present_current_state)
      list.add(current_state.getValue());

    boolean present_creation_time = true;
    list.add(present_creation_time);
    if (present_creation_time)
      list.add(creation_time);

    boolean present_latest_state_change_time = true;
    list.add(present_latest_state_change_time);
    if (present_latest_state_change_time)
      list.add(latest_state_change_time);

    return list.hashCode();
  }

  @Override
  public int compareTo(SegmentStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCurrent_state()).compareTo(other.isSetCurrent_state());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_state()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_state, other.current_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreation_time()).compareTo(other.isSetCreation_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreation_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creation_time, other.creation_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatest_state_change_time()).compareTo(other.isSetLatest_state_change_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatest_state_change_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latest_state_change_time, other.latest_state_change_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SegmentStatus(");
    boolean first = true;

    sb.append("current_state:");
    if (this.current_state == null) {
      sb.append("null");
    } else {
      sb.append(this.current_state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creation_time:");
    sb.append(this.creation_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("latest_state_change_time:");
    sb.append(this.latest_state_change_time);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SegmentStatusStandardSchemeFactory implements SchemeFactory {
    public SegmentStatusStandardScheme getScheme() {
      return new SegmentStatusStandardScheme();
    }
  }

  private static class SegmentStatusStandardScheme extends StandardScheme<SegmentStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SegmentStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CURRENT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.current_state = org.apache.carbondata.format.SegmentState.findByValue(iprot.readI32());
              struct.setCurrent_stateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.creation_time = iprot.readI64();
              struct.setCreation_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LATEST_STATE_CHANGE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.latest_state_change_time = iprot.readI64();
              struct.setLatest_state_change_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SegmentStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.current_state != null) {
        oprot.writeFieldBegin(CURRENT_STATE_FIELD_DESC);
        oprot.writeI32(struct.current_state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATION_TIME_FIELD_DESC);
      oprot.writeI64(struct.creation_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LATEST_STATE_CHANGE_TIME_FIELD_DESC);
      oprot.writeI64(struct.latest_state_change_time);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SegmentStatusTupleSchemeFactory implements SchemeFactory {
    public SegmentStatusTupleScheme getScheme() {
      return new SegmentStatusTupleScheme();
    }
  }

  private static class SegmentStatusTupleScheme extends TupleScheme<SegmentStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SegmentStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCurrent_state()) {
        optionals.set(0);
      }
      if (struct.isSetCreation_time()) {
        optionals.set(1);
      }
      if (struct.isSetLatest_state_change_time()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCurrent_state()) {
        oprot.writeI32(struct.current_state.getValue());
      }
      if (struct.isSetCreation_time()) {
        oprot.writeI64(struct.creation_time);
      }
      if (struct.isSetLatest_state_change_time()) {
        oprot.writeI64(struct.latest_state_change_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SegmentStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.current_state = org.apache.carbondata.format.SegmentState.findByValue(iprot.readI32());
        struct.setCurrent_stateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.creation_time = iprot.readI64();
        struct.setCreation_timeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.latest_state_change_time = iprot.readI64();
        struct.setLatest_state_change_timeIsSet(true);
      }
    }
  }

}

