/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class ColumnDictionaryChunkMeta implements org.apache.thrift.TBase<ColumnDictionaryChunkMeta, ColumnDictionaryChunkMeta._Fields>, java.io.Serializable, Cloneable, Comparable<ColumnDictionaryChunkMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnDictionaryChunkMeta");

  private static final org.apache.thrift.protocol.TField MIN_SURROGATE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("min_surrogate_key", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_SURROGATE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("max_surrogate_key", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField START_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("start_offset", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField END_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("end_offset", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CHUNK_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("chunk_count", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SEGMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("segment_id", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ColumnDictionaryChunkMetaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ColumnDictionaryChunkMetaTupleSchemeFactory());
  }

  public int min_surrogate_key; // required
  public int max_surrogate_key; // required
  public long start_offset; // required
  public long end_offset; // required
  public int chunk_count; // required
  public long segment_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MIN_SURROGATE_KEY((short)1, "min_surrogate_key"),
    MAX_SURROGATE_KEY((short)2, "max_surrogate_key"),
    START_OFFSET((short)3, "start_offset"),
    END_OFFSET((short)4, "end_offset"),
    CHUNK_COUNT((short)5, "chunk_count"),
    SEGMENT_ID((short)6, "segment_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MIN_SURROGATE_KEY
          return MIN_SURROGATE_KEY;
        case 2: // MAX_SURROGATE_KEY
          return MAX_SURROGATE_KEY;
        case 3: // START_OFFSET
          return START_OFFSET;
        case 4: // END_OFFSET
          return END_OFFSET;
        case 5: // CHUNK_COUNT
          return CHUNK_COUNT;
        case 6: // SEGMENT_ID
          return SEGMENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MIN_SURROGATE_KEY_ISSET_ID = 0;
  private static final int __MAX_SURROGATE_KEY_ISSET_ID = 1;
  private static final int __START_OFFSET_ISSET_ID = 2;
  private static final int __END_OFFSET_ISSET_ID = 3;
  private static final int __CHUNK_COUNT_ISSET_ID = 4;
  private static final int __SEGMENT_ID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SEGMENT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MIN_SURROGATE_KEY, new org.apache.thrift.meta_data.FieldMetaData("min_surrogate_key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_SURROGATE_KEY, new org.apache.thrift.meta_data.FieldMetaData("max_surrogate_key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("start_offset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("end_offset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHUNK_COUNT, new org.apache.thrift.meta_data.FieldMetaData("chunk_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEGMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("segment_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnDictionaryChunkMeta.class, metaDataMap);
  }

  public ColumnDictionaryChunkMeta() {
  }

  public ColumnDictionaryChunkMeta(
    int min_surrogate_key,
    int max_surrogate_key,
    long start_offset,
    long end_offset,
    int chunk_count)
  {
    this();
    this.min_surrogate_key = min_surrogate_key;
    setMin_surrogate_keyIsSet(true);
    this.max_surrogate_key = max_surrogate_key;
    setMax_surrogate_keyIsSet(true);
    this.start_offset = start_offset;
    setStart_offsetIsSet(true);
    this.end_offset = end_offset;
    setEnd_offsetIsSet(true);
    this.chunk_count = chunk_count;
    setChunk_countIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ColumnDictionaryChunkMeta(ColumnDictionaryChunkMeta other) {
    __isset_bitfield = other.__isset_bitfield;
    this.min_surrogate_key = other.min_surrogate_key;
    this.max_surrogate_key = other.max_surrogate_key;
    this.start_offset = other.start_offset;
    this.end_offset = other.end_offset;
    this.chunk_count = other.chunk_count;
    this.segment_id = other.segment_id;
  }

  public ColumnDictionaryChunkMeta deepCopy() {
    return new ColumnDictionaryChunkMeta(this);
  }

  @Override
  public void clear() {
    setMin_surrogate_keyIsSet(false);
    this.min_surrogate_key = 0;
    setMax_surrogate_keyIsSet(false);
    this.max_surrogate_key = 0;
    setStart_offsetIsSet(false);
    this.start_offset = 0;
    setEnd_offsetIsSet(false);
    this.end_offset = 0;
    setChunk_countIsSet(false);
    this.chunk_count = 0;
    setSegment_idIsSet(false);
    this.segment_id = 0;
  }

  public int getMin_surrogate_key() {
    return this.min_surrogate_key;
  }

  public ColumnDictionaryChunkMeta setMin_surrogate_key(int min_surrogate_key) {
    this.min_surrogate_key = min_surrogate_key;
    setMin_surrogate_keyIsSet(true);
    return this;
  }

  public void unsetMin_surrogate_key() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_SURROGATE_KEY_ISSET_ID);
  }

  /** Returns true if field min_surrogate_key is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_surrogate_key() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_SURROGATE_KEY_ISSET_ID);
  }

  public void setMin_surrogate_keyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_SURROGATE_KEY_ISSET_ID, value);
  }

  public int getMax_surrogate_key() {
    return this.max_surrogate_key;
  }

  public ColumnDictionaryChunkMeta setMax_surrogate_key(int max_surrogate_key) {
    this.max_surrogate_key = max_surrogate_key;
    setMax_surrogate_keyIsSet(true);
    return this;
  }

  public void unsetMax_surrogate_key() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_SURROGATE_KEY_ISSET_ID);
  }

  /** Returns true if field max_surrogate_key is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_surrogate_key() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_SURROGATE_KEY_ISSET_ID);
  }

  public void setMax_surrogate_keyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_SURROGATE_KEY_ISSET_ID, value);
  }

  public long getStart_offset() {
    return this.start_offset;
  }

  public ColumnDictionaryChunkMeta setStart_offset(long start_offset) {
    this.start_offset = start_offset;
    setStart_offsetIsSet(true);
    return this;
  }

  public void unsetStart_offset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_OFFSET_ISSET_ID);
  }

  /** Returns true if field start_offset is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_offset() {
    return EncodingUtils.testBit(__isset_bitfield, __START_OFFSET_ISSET_ID);
  }

  public void setStart_offsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_OFFSET_ISSET_ID, value);
  }

  public long getEnd_offset() {
    return this.end_offset;
  }

  public ColumnDictionaryChunkMeta setEnd_offset(long end_offset) {
    this.end_offset = end_offset;
    setEnd_offsetIsSet(true);
    return this;
  }

  public void unsetEnd_offset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END_OFFSET_ISSET_ID);
  }

  /** Returns true if field end_offset is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_offset() {
    return EncodingUtils.testBit(__isset_bitfield, __END_OFFSET_ISSET_ID);
  }

  public void setEnd_offsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END_OFFSET_ISSET_ID, value);
  }

  public int getChunk_count() {
    return this.chunk_count;
  }

  public ColumnDictionaryChunkMeta setChunk_count(int chunk_count) {
    this.chunk_count = chunk_count;
    setChunk_countIsSet(true);
    return this;
  }

  public void unsetChunk_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHUNK_COUNT_ISSET_ID);
  }

  /** Returns true if field chunk_count is set (has been assigned a value) and false otherwise */
  public boolean isSetChunk_count() {
    return EncodingUtils.testBit(__isset_bitfield, __CHUNK_COUNT_ISSET_ID);
  }

  public void setChunk_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHUNK_COUNT_ISSET_ID, value);
  }

  public long getSegment_id() {
    return this.segment_id;
  }

  public ColumnDictionaryChunkMeta setSegment_id(long segment_id) {
    this.segment_id = segment_id;
    setSegment_idIsSet(true);
    return this;
  }

  public void unsetSegment_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEGMENT_ID_ISSET_ID);
  }

  /** Returns true if field segment_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSegment_id() {
    return EncodingUtils.testBit(__isset_bitfield, __SEGMENT_ID_ISSET_ID);
  }

  public void setSegment_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEGMENT_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MIN_SURROGATE_KEY:
      if (value == null) {
        unsetMin_surrogate_key();
      } else {
        setMin_surrogate_key((Integer)value);
      }
      break;

    case MAX_SURROGATE_KEY:
      if (value == null) {
        unsetMax_surrogate_key();
      } else {
        setMax_surrogate_key((Integer)value);
      }
      break;

    case START_OFFSET:
      if (value == null) {
        unsetStart_offset();
      } else {
        setStart_offset((Long)value);
      }
      break;

    case END_OFFSET:
      if (value == null) {
        unsetEnd_offset();
      } else {
        setEnd_offset((Long)value);
      }
      break;

    case CHUNK_COUNT:
      if (value == null) {
        unsetChunk_count();
      } else {
        setChunk_count((Integer)value);
      }
      break;

    case SEGMENT_ID:
      if (value == null) {
        unsetSegment_id();
      } else {
        setSegment_id((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MIN_SURROGATE_KEY:
      return getMin_surrogate_key();

    case MAX_SURROGATE_KEY:
      return getMax_surrogate_key();

    case START_OFFSET:
      return getStart_offset();

    case END_OFFSET:
      return getEnd_offset();

    case CHUNK_COUNT:
      return getChunk_count();

    case SEGMENT_ID:
      return getSegment_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MIN_SURROGATE_KEY:
      return isSetMin_surrogate_key();
    case MAX_SURROGATE_KEY:
      return isSetMax_surrogate_key();
    case START_OFFSET:
      return isSetStart_offset();
    case END_OFFSET:
      return isSetEnd_offset();
    case CHUNK_COUNT:
      return isSetChunk_count();
    case SEGMENT_ID:
      return isSetSegment_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ColumnDictionaryChunkMeta)
      return this.equals((ColumnDictionaryChunkMeta)that);
    return false;
  }

  public boolean equals(ColumnDictionaryChunkMeta that) {
    if (that == null)
      return false;

    boolean this_present_min_surrogate_key = true;
    boolean that_present_min_surrogate_key = true;
    if (this_present_min_surrogate_key || that_present_min_surrogate_key) {
      if (!(this_present_min_surrogate_key && that_present_min_surrogate_key))
        return false;
      if (this.min_surrogate_key != that.min_surrogate_key)
        return false;
    }

    boolean this_present_max_surrogate_key = true;
    boolean that_present_max_surrogate_key = true;
    if (this_present_max_surrogate_key || that_present_max_surrogate_key) {
      if (!(this_present_max_surrogate_key && that_present_max_surrogate_key))
        return false;
      if (this.max_surrogate_key != that.max_surrogate_key)
        return false;
    }

    boolean this_present_start_offset = true;
    boolean that_present_start_offset = true;
    if (this_present_start_offset || that_present_start_offset) {
      if (!(this_present_start_offset && that_present_start_offset))
        return false;
      if (this.start_offset != that.start_offset)
        return false;
    }

    boolean this_present_end_offset = true;
    boolean that_present_end_offset = true;
    if (this_present_end_offset || that_present_end_offset) {
      if (!(this_present_end_offset && that_present_end_offset))
        return false;
      if (this.end_offset != that.end_offset)
        return false;
    }

    boolean this_present_chunk_count = true;
    boolean that_present_chunk_count = true;
    if (this_present_chunk_count || that_present_chunk_count) {
      if (!(this_present_chunk_count && that_present_chunk_count))
        return false;
      if (this.chunk_count != that.chunk_count)
        return false;
    }

    boolean this_present_segment_id = true && this.isSetSegment_id();
    boolean that_present_segment_id = true && that.isSetSegment_id();
    if (this_present_segment_id || that_present_segment_id) {
      if (!(this_present_segment_id && that_present_segment_id))
        return false;
      if (this.segment_id != that.segment_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_min_surrogate_key = true;
    list.add(present_min_surrogate_key);
    if (present_min_surrogate_key)
      list.add(min_surrogate_key);

    boolean present_max_surrogate_key = true;
    list.add(present_max_surrogate_key);
    if (present_max_surrogate_key)
      list.add(max_surrogate_key);

    boolean present_start_offset = true;
    list.add(present_start_offset);
    if (present_start_offset)
      list.add(start_offset);

    boolean present_end_offset = true;
    list.add(present_end_offset);
    if (present_end_offset)
      list.add(end_offset);

    boolean present_chunk_count = true;
    list.add(present_chunk_count);
    if (present_chunk_count)
      list.add(chunk_count);

    boolean present_segment_id = true && (isSetSegment_id());
    list.add(present_segment_id);
    if (present_segment_id)
      list.add(segment_id);

    return list.hashCode();
  }

  @Override
  public int compareTo(ColumnDictionaryChunkMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMin_surrogate_key()).compareTo(other.isSetMin_surrogate_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_surrogate_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_surrogate_key, other.min_surrogate_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_surrogate_key()).compareTo(other.isSetMax_surrogate_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_surrogate_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_surrogate_key, other.max_surrogate_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_offset()).compareTo(other.isSetStart_offset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_offset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_offset, other.start_offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_offset()).compareTo(other.isSetEnd_offset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_offset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_offset, other.end_offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChunk_count()).compareTo(other.isSetChunk_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChunk_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunk_count, other.chunk_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSegment_id()).compareTo(other.isSetSegment_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSegment_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segment_id, other.segment_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ColumnDictionaryChunkMeta(");
    boolean first = true;

    sb.append("min_surrogate_key:");
    sb.append(this.min_surrogate_key);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_surrogate_key:");
    sb.append(this.max_surrogate_key);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_offset:");
    sb.append(this.start_offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("end_offset:");
    sb.append(this.end_offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chunk_count:");
    sb.append(this.chunk_count);
    first = false;
    if (isSetSegment_id()) {
      if (!first) sb.append(", ");
      sb.append("segment_id:");
      sb.append(this.segment_id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'min_surrogate_key' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'max_surrogate_key' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'start_offset' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'end_offset' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'chunk_count' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ColumnDictionaryChunkMetaStandardSchemeFactory implements SchemeFactory {
    public ColumnDictionaryChunkMetaStandardScheme getScheme() {
      return new ColumnDictionaryChunkMetaStandardScheme();
    }
  }

  private static class ColumnDictionaryChunkMetaStandardScheme extends StandardScheme<ColumnDictionaryChunkMeta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ColumnDictionaryChunkMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MIN_SURROGATE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.min_surrogate_key = iprot.readI32();
              struct.setMin_surrogate_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_SURROGATE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_surrogate_key = iprot.readI32();
              struct.setMax_surrogate_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start_offset = iprot.readI64();
              struct.setStart_offsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.end_offset = iprot.readI64();
              struct.setEnd_offsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHUNK_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chunk_count = iprot.readI32();
              struct.setChunk_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEGMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.segment_id = iprot.readI64();
              struct.setSegment_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMin_surrogate_key()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'min_surrogate_key' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMax_surrogate_key()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_surrogate_key' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStart_offset()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'start_offset' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEnd_offset()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'end_offset' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetChunk_count()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'chunk_count' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ColumnDictionaryChunkMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MIN_SURROGATE_KEY_FIELD_DESC);
      oprot.writeI32(struct.min_surrogate_key);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_SURROGATE_KEY_FIELD_DESC);
      oprot.writeI32(struct.max_surrogate_key);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_OFFSET_FIELD_DESC);
      oprot.writeI64(struct.start_offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_OFFSET_FIELD_DESC);
      oprot.writeI64(struct.end_offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHUNK_COUNT_FIELD_DESC);
      oprot.writeI32(struct.chunk_count);
      oprot.writeFieldEnd();
      if (struct.isSetSegment_id()) {
        oprot.writeFieldBegin(SEGMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.segment_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ColumnDictionaryChunkMetaTupleSchemeFactory implements SchemeFactory {
    public ColumnDictionaryChunkMetaTupleScheme getScheme() {
      return new ColumnDictionaryChunkMetaTupleScheme();
    }
  }

  private static class ColumnDictionaryChunkMetaTupleScheme extends TupleScheme<ColumnDictionaryChunkMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ColumnDictionaryChunkMeta struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.min_surrogate_key);
      oprot.writeI32(struct.max_surrogate_key);
      oprot.writeI64(struct.start_offset);
      oprot.writeI64(struct.end_offset);
      oprot.writeI32(struct.chunk_count);
      BitSet optionals = new BitSet();
      if (struct.isSetSegment_id()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSegment_id()) {
        oprot.writeI64(struct.segment_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ColumnDictionaryChunkMeta struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.min_surrogate_key = iprot.readI32();
      struct.setMin_surrogate_keyIsSet(true);
      struct.max_surrogate_key = iprot.readI32();
      struct.setMax_surrogate_keyIsSet(true);
      struct.start_offset = iprot.readI64();
      struct.setStart_offsetIsSet(true);
      struct.end_offset = iprot.readI64();
      struct.setEnd_offsetIsSet(true);
      struct.chunk_count = iprot.readI32();
      struct.setChunk_countIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.segment_id = iprot.readI64();
        struct.setSegment_idIsSet(true);
      }
    }
  }

}

