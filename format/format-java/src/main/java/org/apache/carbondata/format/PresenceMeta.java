/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * To handle space data with nulls
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class PresenceMeta implements org.apache.thrift.TBase<PresenceMeta, PresenceMeta._Fields>, java.io.Serializable, Cloneable, Comparable<PresenceMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PresenceMeta");

  private static final org.apache.thrift.protocol.TField REPRESENTS_PRESENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("represents_presence", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField PRESENT_BIT_STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("present_bit_stream", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PresenceMetaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PresenceMetaTupleSchemeFactory());
  }

  public boolean represents_presence; // required
  public ByteBuffer present_bit_stream; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPRESENTS_PRESENCE((short)1, "represents_presence"),
    PRESENT_BIT_STREAM((short)2, "present_bit_stream");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPRESENTS_PRESENCE
          return REPRESENTS_PRESENCE;
        case 2: // PRESENT_BIT_STREAM
          return PRESENT_BIT_STREAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPRESENTS_PRESENCE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPRESENTS_PRESENCE, new org.apache.thrift.meta_data.FieldMetaData("represents_presence", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRESENT_BIT_STREAM, new org.apache.thrift.meta_data.FieldMetaData("present_bit_stream", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PresenceMeta.class, metaDataMap);
  }

  public PresenceMeta() {
  }

  public PresenceMeta(
    boolean represents_presence,
    ByteBuffer present_bit_stream)
  {
    this();
    this.represents_presence = represents_presence;
    setRepresents_presenceIsSet(true);
    this.present_bit_stream = org.apache.thrift.TBaseHelper.copyBinary(present_bit_stream);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PresenceMeta(PresenceMeta other) {
    __isset_bitfield = other.__isset_bitfield;
    this.represents_presence = other.represents_presence;
    if (other.isSetPresent_bit_stream()) {
      this.present_bit_stream = org.apache.thrift.TBaseHelper.copyBinary(other.present_bit_stream);
    }
  }

  public PresenceMeta deepCopy() {
    return new PresenceMeta(this);
  }

  @Override
  public void clear() {
    setRepresents_presenceIsSet(false);
    this.represents_presence = false;
    this.present_bit_stream = null;
  }

  public boolean isRepresents_presence() {
    return this.represents_presence;
  }

  public PresenceMeta setRepresents_presence(boolean represents_presence) {
    this.represents_presence = represents_presence;
    setRepresents_presenceIsSet(true);
    return this;
  }

  public void unsetRepresents_presence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPRESENTS_PRESENCE_ISSET_ID);
  }

  /** Returns true if field represents_presence is set (has been assigned a value) and false otherwise */
  public boolean isSetRepresents_presence() {
    return EncodingUtils.testBit(__isset_bitfield, __REPRESENTS_PRESENCE_ISSET_ID);
  }

  public void setRepresents_presenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPRESENTS_PRESENCE_ISSET_ID, value);
  }

  public byte[] getPresent_bit_stream() {
    setPresent_bit_stream(org.apache.thrift.TBaseHelper.rightSize(present_bit_stream));
    return present_bit_stream == null ? null : present_bit_stream.array();
  }

  public ByteBuffer bufferForPresent_bit_stream() {
    return org.apache.thrift.TBaseHelper.copyBinary(present_bit_stream);
  }

  public PresenceMeta setPresent_bit_stream(byte[] present_bit_stream) {
    this.present_bit_stream = present_bit_stream == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(present_bit_stream, present_bit_stream.length));
    return this;
  }

  public PresenceMeta setPresent_bit_stream(ByteBuffer present_bit_stream) {
    this.present_bit_stream = org.apache.thrift.TBaseHelper.copyBinary(present_bit_stream);
    return this;
  }

  public void unsetPresent_bit_stream() {
    this.present_bit_stream = null;
  }

  /** Returns true if field present_bit_stream is set (has been assigned a value) and false otherwise */
  public boolean isSetPresent_bit_stream() {
    return this.present_bit_stream != null;
  }

  public void setPresent_bit_streamIsSet(boolean value) {
    if (!value) {
      this.present_bit_stream = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REPRESENTS_PRESENCE:
      if (value == null) {
        unsetRepresents_presence();
      } else {
        setRepresents_presence((Boolean)value);
      }
      break;

    case PRESENT_BIT_STREAM:
      if (value == null) {
        unsetPresent_bit_stream();
      } else {
        setPresent_bit_stream((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REPRESENTS_PRESENCE:
      return isRepresents_presence();

    case PRESENT_BIT_STREAM:
      return getPresent_bit_stream();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REPRESENTS_PRESENCE:
      return isSetRepresents_presence();
    case PRESENT_BIT_STREAM:
      return isSetPresent_bit_stream();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PresenceMeta)
      return this.equals((PresenceMeta)that);
    return false;
  }

  public boolean equals(PresenceMeta that) {
    if (that == null)
      return false;

    boolean this_present_represents_presence = true;
    boolean that_present_represents_presence = true;
    if (this_present_represents_presence || that_present_represents_presence) {
      if (!(this_present_represents_presence && that_present_represents_presence))
        return false;
      if (this.represents_presence != that.represents_presence)
        return false;
    }

    boolean this_present_present_bit_stream = true && this.isSetPresent_bit_stream();
    boolean that_present_present_bit_stream = true && that.isSetPresent_bit_stream();
    if (this_present_present_bit_stream || that_present_present_bit_stream) {
      if (!(this_present_present_bit_stream && that_present_present_bit_stream))
        return false;
      if (!this.present_bit_stream.equals(that.present_bit_stream))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_represents_presence = true;
    list.add(present_represents_presence);
    if (present_represents_presence)
      list.add(represents_presence);

    boolean present_present_bit_stream = true && (isSetPresent_bit_stream());
    list.add(present_present_bit_stream);
    if (present_present_bit_stream)
      list.add(present_bit_stream);

    return list.hashCode();
  }

  @Override
  public int compareTo(PresenceMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRepresents_presence()).compareTo(other.isSetRepresents_presence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepresents_presence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.represents_presence, other.represents_presence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPresent_bit_stream()).compareTo(other.isSetPresent_bit_stream());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPresent_bit_stream()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.present_bit_stream, other.present_bit_stream);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PresenceMeta(");
    boolean first = true;

    sb.append("represents_presence:");
    sb.append(this.represents_presence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("present_bit_stream:");
    if (this.present_bit_stream == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.present_bit_stream, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'represents_presence' because it's a primitive and you chose the non-beans generator.
    if (present_bit_stream == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'present_bit_stream' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PresenceMetaStandardSchemeFactory implements SchemeFactory {
    public PresenceMetaStandardScheme getScheme() {
      return new PresenceMetaStandardScheme();
    }
  }

  private static class PresenceMetaStandardScheme extends StandardScheme<PresenceMeta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PresenceMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPRESENTS_PRESENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.represents_presence = iprot.readBool();
              struct.setRepresents_presenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRESENT_BIT_STREAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.present_bit_stream = iprot.readBinary();
              struct.setPresent_bit_streamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRepresents_presence()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'represents_presence' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PresenceMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REPRESENTS_PRESENCE_FIELD_DESC);
      oprot.writeBool(struct.represents_presence);
      oprot.writeFieldEnd();
      if (struct.present_bit_stream != null) {
        oprot.writeFieldBegin(PRESENT_BIT_STREAM_FIELD_DESC);
        oprot.writeBinary(struct.present_bit_stream);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PresenceMetaTupleSchemeFactory implements SchemeFactory {
    public PresenceMetaTupleScheme getScheme() {
      return new PresenceMetaTupleScheme();
    }
  }

  private static class PresenceMetaTupleScheme extends TupleScheme<PresenceMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PresenceMeta struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.represents_presence);
      oprot.writeBinary(struct.present_bit_stream);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PresenceMeta struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.represents_presence = iprot.readBool();
      struct.setRepresents_presenceIsSet(true);
      struct.present_bit_stream = iprot.readBinary();
      struct.setPresent_bit_streamIsSet(true);
    }
  }

}

