/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Footer for indexed carbon file
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class FileFooter implements org.apache.thrift.TBase<FileFooter, FileFooter._Fields>, java.io.Serializable, Cloneable, Comparable<FileFooter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileFooter");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_rows", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("table_columns", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SEGMENT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("segment_info", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField BLOCKLET_INDEX_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("blocklet_index_list", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField BLOCKLET_INFO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("blocklet_info_list", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField DICTIONARY_FIELD_DESC = new org.apache.thrift.protocol.TField("dictionary", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FileFooterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FileFooterTupleSchemeFactory());
  }

  public int version; // required
  public long num_rows; // required
  public List<org.apache.carbondata.format.ColumnSchema> table_columns; // required
  public SegmentInfo segment_info; // required
  public List<BlockletIndex> blocklet_index_list; // required
  public List<BlockletInfo> blocklet_info_list; // required
  public org.apache.carbondata.format.ColumnDictionaryChunk dictionary; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    NUM_ROWS((short)2, "num_rows"),
    TABLE_COLUMNS((short)3, "table_columns"),
    SEGMENT_INFO((short)4, "segment_info"),
    BLOCKLET_INDEX_LIST((short)5, "blocklet_index_list"),
    BLOCKLET_INFO_LIST((short)6, "blocklet_info_list"),
    DICTIONARY((short)7, "dictionary");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // NUM_ROWS
          return NUM_ROWS;
        case 3: // TABLE_COLUMNS
          return TABLE_COLUMNS;
        case 4: // SEGMENT_INFO
          return SEGMENT_INFO;
        case 5: // BLOCKLET_INDEX_LIST
          return BLOCKLET_INDEX_LIST;
        case 6: // BLOCKLET_INFO_LIST
          return BLOCKLET_INFO_LIST;
        case 7: // DICTIONARY
          return DICTIONARY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __NUM_ROWS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DICTIONARY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_ROWS, new org.apache.thrift.meta_data.FieldMetaData("num_rows", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLE_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("table_columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.carbondata.format.ColumnSchema.class))));
    tmpMap.put(_Fields.SEGMENT_INFO, new org.apache.thrift.meta_data.FieldMetaData("segment_info", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SegmentInfo.class)));
    tmpMap.put(_Fields.BLOCKLET_INDEX_LIST, new org.apache.thrift.meta_data.FieldMetaData("blocklet_index_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BlockletIndex.class))));
    tmpMap.put(_Fields.BLOCKLET_INFO_LIST, new org.apache.thrift.meta_data.FieldMetaData("blocklet_info_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BlockletInfo.class))));
    tmpMap.put(_Fields.DICTIONARY, new org.apache.thrift.meta_data.FieldMetaData("dictionary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.carbondata.format.ColumnDictionaryChunk.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileFooter.class, metaDataMap);
  }

  public FileFooter() {
  }

  public FileFooter(
    int version,
    long num_rows,
    List<org.apache.carbondata.format.ColumnSchema> table_columns,
    SegmentInfo segment_info,
    List<BlockletIndex> blocklet_index_list,
    List<BlockletInfo> blocklet_info_list)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
    this.num_rows = num_rows;
    setNum_rowsIsSet(true);
    this.table_columns = table_columns;
    this.segment_info = segment_info;
    this.blocklet_index_list = blocklet_index_list;
    this.blocklet_info_list = blocklet_info_list;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileFooter(FileFooter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    this.num_rows = other.num_rows;
    if (other.isSetTable_columns()) {
      List<org.apache.carbondata.format.ColumnSchema> __this__table_columns = new ArrayList<org.apache.carbondata.format.ColumnSchema>(other.table_columns.size());
      for (org.apache.carbondata.format.ColumnSchema other_element : other.table_columns) {
        __this__table_columns.add(new org.apache.carbondata.format.ColumnSchema(other_element));
      }
      this.table_columns = __this__table_columns;
    }
    if (other.isSetSegment_info()) {
      this.segment_info = new SegmentInfo(other.segment_info);
    }
    if (other.isSetBlocklet_index_list()) {
      List<BlockletIndex> __this__blocklet_index_list = new ArrayList<BlockletIndex>(other.blocklet_index_list.size());
      for (BlockletIndex other_element : other.blocklet_index_list) {
        __this__blocklet_index_list.add(new BlockletIndex(other_element));
      }
      this.blocklet_index_list = __this__blocklet_index_list;
    }
    if (other.isSetBlocklet_info_list()) {
      List<BlockletInfo> __this__blocklet_info_list = new ArrayList<BlockletInfo>(other.blocklet_info_list.size());
      for (BlockletInfo other_element : other.blocklet_info_list) {
        __this__blocklet_info_list.add(new BlockletInfo(other_element));
      }
      this.blocklet_info_list = __this__blocklet_info_list;
    }
    if (other.isSetDictionary()) {
      this.dictionary = new org.apache.carbondata.format.ColumnDictionaryChunk(other.dictionary);
    }
  }

  public FileFooter deepCopy() {
    return new FileFooter(this);
  }

  @Override
  public void clear() {
    setVersionIsSet(false);
    this.version = 0;
    setNum_rowsIsSet(false);
    this.num_rows = 0;
    this.table_columns = null;
    this.segment_info = null;
    this.blocklet_index_list = null;
    this.blocklet_info_list = null;
    this.dictionary = null;
  }

  public int getVersion() {
    return this.version;
  }

  public FileFooter setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public long getNum_rows() {
    return this.num_rows;
  }

  public FileFooter setNum_rows(long num_rows) {
    this.num_rows = num_rows;
    setNum_rowsIsSet(true);
    return this;
  }

  public void unsetNum_rows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ROWS_ISSET_ID);
  }

  /** Returns true if field num_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_rows() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ROWS_ISSET_ID);
  }

  public void setNum_rowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ROWS_ISSET_ID, value);
  }

  public int getTable_columnsSize() {
    return (this.table_columns == null) ? 0 : this.table_columns.size();
  }

  public java.util.Iterator<org.apache.carbondata.format.ColumnSchema> getTable_columnsIterator() {
    return (this.table_columns == null) ? null : this.table_columns.iterator();
  }

  public void addToTable_columns(org.apache.carbondata.format.ColumnSchema elem) {
    if (this.table_columns == null) {
      this.table_columns = new ArrayList<org.apache.carbondata.format.ColumnSchema>();
    }
    this.table_columns.add(elem);
  }

  public List<org.apache.carbondata.format.ColumnSchema> getTable_columns() {
    return this.table_columns;
  }

  public FileFooter setTable_columns(List<org.apache.carbondata.format.ColumnSchema> table_columns) {
    this.table_columns = table_columns;
    return this;
  }

  public void unsetTable_columns() {
    this.table_columns = null;
  }

  /** Returns true if field table_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_columns() {
    return this.table_columns != null;
  }

  public void setTable_columnsIsSet(boolean value) {
    if (!value) {
      this.table_columns = null;
    }
  }

  public SegmentInfo getSegment_info() {
    return this.segment_info;
  }

  public FileFooter setSegment_info(SegmentInfo segment_info) {
    this.segment_info = segment_info;
    return this;
  }

  public void unsetSegment_info() {
    this.segment_info = null;
  }

  /** Returns true if field segment_info is set (has been assigned a value) and false otherwise */
  public boolean isSetSegment_info() {
    return this.segment_info != null;
  }

  public void setSegment_infoIsSet(boolean value) {
    if (!value) {
      this.segment_info = null;
    }
  }

  public int getBlocklet_index_listSize() {
    return (this.blocklet_index_list == null) ? 0 : this.blocklet_index_list.size();
  }

  public java.util.Iterator<BlockletIndex> getBlocklet_index_listIterator() {
    return (this.blocklet_index_list == null) ? null : this.blocklet_index_list.iterator();
  }

  public void addToBlocklet_index_list(BlockletIndex elem) {
    if (this.blocklet_index_list == null) {
      this.blocklet_index_list = new ArrayList<BlockletIndex>();
    }
    this.blocklet_index_list.add(elem);
  }

  public List<BlockletIndex> getBlocklet_index_list() {
    return this.blocklet_index_list;
  }

  public FileFooter setBlocklet_index_list(List<BlockletIndex> blocklet_index_list) {
    this.blocklet_index_list = blocklet_index_list;
    return this;
  }

  public void unsetBlocklet_index_list() {
    this.blocklet_index_list = null;
  }

  /** Returns true if field blocklet_index_list is set (has been assigned a value) and false otherwise */
  public boolean isSetBlocklet_index_list() {
    return this.blocklet_index_list != null;
  }

  public void setBlocklet_index_listIsSet(boolean value) {
    if (!value) {
      this.blocklet_index_list = null;
    }
  }

  public int getBlocklet_info_listSize() {
    return (this.blocklet_info_list == null) ? 0 : this.blocklet_info_list.size();
  }

  public java.util.Iterator<BlockletInfo> getBlocklet_info_listIterator() {
    return (this.blocklet_info_list == null) ? null : this.blocklet_info_list.iterator();
  }

  public void addToBlocklet_info_list(BlockletInfo elem) {
    if (this.blocklet_info_list == null) {
      this.blocklet_info_list = new ArrayList<BlockletInfo>();
    }
    this.blocklet_info_list.add(elem);
  }

  public List<BlockletInfo> getBlocklet_info_list() {
    return this.blocklet_info_list;
  }

  public FileFooter setBlocklet_info_list(List<BlockletInfo> blocklet_info_list) {
    this.blocklet_info_list = blocklet_info_list;
    return this;
  }

  public void unsetBlocklet_info_list() {
    this.blocklet_info_list = null;
  }

  /** Returns true if field blocklet_info_list is set (has been assigned a value) and false otherwise */
  public boolean isSetBlocklet_info_list() {
    return this.blocklet_info_list != null;
  }

  public void setBlocklet_info_listIsSet(boolean value) {
    if (!value) {
      this.blocklet_info_list = null;
    }
  }

  public org.apache.carbondata.format.ColumnDictionaryChunk getDictionary() {
    return this.dictionary;
  }

  public FileFooter setDictionary(org.apache.carbondata.format.ColumnDictionaryChunk dictionary) {
    this.dictionary = dictionary;
    return this;
  }

  public void unsetDictionary() {
    this.dictionary = null;
  }

  /** Returns true if field dictionary is set (has been assigned a value) and false otherwise */
  public boolean isSetDictionary() {
    return this.dictionary != null;
  }

  public void setDictionaryIsSet(boolean value) {
    if (!value) {
      this.dictionary = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case NUM_ROWS:
      if (value == null) {
        unsetNum_rows();
      } else {
        setNum_rows((Long)value);
      }
      break;

    case TABLE_COLUMNS:
      if (value == null) {
        unsetTable_columns();
      } else {
        setTable_columns((List<org.apache.carbondata.format.ColumnSchema>)value);
      }
      break;

    case SEGMENT_INFO:
      if (value == null) {
        unsetSegment_info();
      } else {
        setSegment_info((SegmentInfo)value);
      }
      break;

    case BLOCKLET_INDEX_LIST:
      if (value == null) {
        unsetBlocklet_index_list();
      } else {
        setBlocklet_index_list((List<BlockletIndex>)value);
      }
      break;

    case BLOCKLET_INFO_LIST:
      if (value == null) {
        unsetBlocklet_info_list();
      } else {
        setBlocklet_info_list((List<BlockletInfo>)value);
      }
      break;

    case DICTIONARY:
      if (value == null) {
        unsetDictionary();
      } else {
        setDictionary((org.apache.carbondata.format.ColumnDictionaryChunk)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case NUM_ROWS:
      return getNum_rows();

    case TABLE_COLUMNS:
      return getTable_columns();

    case SEGMENT_INFO:
      return getSegment_info();

    case BLOCKLET_INDEX_LIST:
      return getBlocklet_index_list();

    case BLOCKLET_INFO_LIST:
      return getBlocklet_info_list();

    case DICTIONARY:
      return getDictionary();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case NUM_ROWS:
      return isSetNum_rows();
    case TABLE_COLUMNS:
      return isSetTable_columns();
    case SEGMENT_INFO:
      return isSetSegment_info();
    case BLOCKLET_INDEX_LIST:
      return isSetBlocklet_index_list();
    case BLOCKLET_INFO_LIST:
      return isSetBlocklet_info_list();
    case DICTIONARY:
      return isSetDictionary();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileFooter)
      return this.equals((FileFooter)that);
    return false;
  }

  public boolean equals(FileFooter that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_num_rows = true;
    boolean that_present_num_rows = true;
    if (this_present_num_rows || that_present_num_rows) {
      if (!(this_present_num_rows && that_present_num_rows))
        return false;
      if (this.num_rows != that.num_rows)
        return false;
    }

    boolean this_present_table_columns = true && this.isSetTable_columns();
    boolean that_present_table_columns = true && that.isSetTable_columns();
    if (this_present_table_columns || that_present_table_columns) {
      if (!(this_present_table_columns && that_present_table_columns))
        return false;
      if (!this.table_columns.equals(that.table_columns))
        return false;
    }

    boolean this_present_segment_info = true && this.isSetSegment_info();
    boolean that_present_segment_info = true && that.isSetSegment_info();
    if (this_present_segment_info || that_present_segment_info) {
      if (!(this_present_segment_info && that_present_segment_info))
        return false;
      if (!this.segment_info.equals(that.segment_info))
        return false;
    }

    boolean this_present_blocklet_index_list = true && this.isSetBlocklet_index_list();
    boolean that_present_blocklet_index_list = true && that.isSetBlocklet_index_list();
    if (this_present_blocklet_index_list || that_present_blocklet_index_list) {
      if (!(this_present_blocklet_index_list && that_present_blocklet_index_list))
        return false;
      if (!this.blocklet_index_list.equals(that.blocklet_index_list))
        return false;
    }

    boolean this_present_blocklet_info_list = true && this.isSetBlocklet_info_list();
    boolean that_present_blocklet_info_list = true && that.isSetBlocklet_info_list();
    if (this_present_blocklet_info_list || that_present_blocklet_info_list) {
      if (!(this_present_blocklet_info_list && that_present_blocklet_info_list))
        return false;
      if (!this.blocklet_info_list.equals(that.blocklet_info_list))
        return false;
    }

    boolean this_present_dictionary = true && this.isSetDictionary();
    boolean that_present_dictionary = true && that.isSetDictionary();
    if (this_present_dictionary || that_present_dictionary) {
      if (!(this_present_dictionary && that_present_dictionary))
        return false;
      if (!this.dictionary.equals(that.dictionary))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_num_rows = true;
    list.add(present_num_rows);
    if (present_num_rows)
      list.add(num_rows);

    boolean present_table_columns = true && (isSetTable_columns());
    list.add(present_table_columns);
    if (present_table_columns)
      list.add(table_columns);

    boolean present_segment_info = true && (isSetSegment_info());
    list.add(present_segment_info);
    if (present_segment_info)
      list.add(segment_info);

    boolean present_blocklet_index_list = true && (isSetBlocklet_index_list());
    list.add(present_blocklet_index_list);
    if (present_blocklet_index_list)
      list.add(blocklet_index_list);

    boolean present_blocklet_info_list = true && (isSetBlocklet_info_list());
    list.add(present_blocklet_info_list);
    if (present_blocklet_info_list)
      list.add(blocklet_info_list);

    boolean present_dictionary = true && (isSetDictionary());
    list.add(present_dictionary);
    if (present_dictionary)
      list.add(dictionary);

    return list.hashCode();
  }

  @Override
  public int compareTo(FileFooter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_rows()).compareTo(other.isSetNum_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_rows, other.num_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_columns()).compareTo(other.isSetTable_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_columns, other.table_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSegment_info()).compareTo(other.isSetSegment_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSegment_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segment_info, other.segment_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlocklet_index_list()).compareTo(other.isSetBlocklet_index_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocklet_index_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocklet_index_list, other.blocklet_index_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlocklet_info_list()).compareTo(other.isSetBlocklet_info_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocklet_info_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocklet_info_list, other.blocklet_info_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDictionary()).compareTo(other.isSetDictionary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDictionary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictionary, other.dictionary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileFooter(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_rows:");
    sb.append(this.num_rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("table_columns:");
    if (this.table_columns == null) {
      sb.append("null");
    } else {
      sb.append(this.table_columns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("segment_info:");
    if (this.segment_info == null) {
      sb.append("null");
    } else {
      sb.append(this.segment_info);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blocklet_index_list:");
    if (this.blocklet_index_list == null) {
      sb.append("null");
    } else {
      sb.append(this.blocklet_index_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blocklet_info_list:");
    if (this.blocklet_info_list == null) {
      sb.append("null");
    } else {
      sb.append(this.blocklet_info_list);
    }
    first = false;
    if (isSetDictionary()) {
      if (!first) sb.append(", ");
      sb.append("dictionary:");
      if (this.dictionary == null) {
        sb.append("null");
      } else {
        sb.append(this.dictionary);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num_rows' because it's a primitive and you chose the non-beans generator.
    if (table_columns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_columns' was not present! Struct: " + toString());
    }
    if (segment_info == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'segment_info' was not present! Struct: " + toString());
    }
    if (blocklet_index_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'blocklet_index_list' was not present! Struct: " + toString());
    }
    if (blocklet_info_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'blocklet_info_list' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (segment_info != null) {
      segment_info.validate();
    }
    if (dictionary != null) {
      dictionary.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileFooterStandardSchemeFactory implements SchemeFactory {
    public FileFooterStandardScheme getScheme() {
      return new FileFooterStandardScheme();
    }
  }

  private static class FileFooterStandardScheme extends StandardScheme<FileFooter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileFooter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_rows = iprot.readI64();
              struct.setNum_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.table_columns = new ArrayList<org.apache.carbondata.format.ColumnSchema>(_list56.size);
                org.apache.carbondata.format.ColumnSchema _elem57;
                for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                {
                  _elem57 = new org.apache.carbondata.format.ColumnSchema();
                  _elem57.read(iprot);
                  struct.table_columns.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setTable_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEGMENT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.segment_info = new SegmentInfo();
              struct.segment_info.read(iprot);
              struct.setSegment_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BLOCKLET_INDEX_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                struct.blocklet_index_list = new ArrayList<BlockletIndex>(_list59.size);
                BlockletIndex _elem60;
                for (int _i61 = 0; _i61 < _list59.size; ++_i61)
                {
                  _elem60 = new BlockletIndex();
                  _elem60.read(iprot);
                  struct.blocklet_index_list.add(_elem60);
                }
                iprot.readListEnd();
              }
              struct.setBlocklet_index_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BLOCKLET_INFO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                struct.blocklet_info_list = new ArrayList<BlockletInfo>(_list62.size);
                BlockletInfo _elem63;
                for (int _i64 = 0; _i64 < _list62.size; ++_i64)
                {
                  _elem63 = new BlockletInfo();
                  _elem63.read(iprot);
                  struct.blocklet_info_list.add(_elem63);
                }
                iprot.readListEnd();
              }
              struct.setBlocklet_info_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DICTIONARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dictionary = new org.apache.carbondata.format.ColumnDictionaryChunk();
              struct.dictionary.read(iprot);
              struct.setDictionaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum_rows()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_rows' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileFooter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_ROWS_FIELD_DESC);
      oprot.writeI64(struct.num_rows);
      oprot.writeFieldEnd();
      if (struct.table_columns != null) {
        oprot.writeFieldBegin(TABLE_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.table_columns.size()));
          for (org.apache.carbondata.format.ColumnSchema _iter65 : struct.table_columns)
          {
            _iter65.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.segment_info != null) {
        oprot.writeFieldBegin(SEGMENT_INFO_FIELD_DESC);
        struct.segment_info.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.blocklet_index_list != null) {
        oprot.writeFieldBegin(BLOCKLET_INDEX_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.blocklet_index_list.size()));
          for (BlockletIndex _iter66 : struct.blocklet_index_list)
          {
            _iter66.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.blocklet_info_list != null) {
        oprot.writeFieldBegin(BLOCKLET_INFO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.blocklet_info_list.size()));
          for (BlockletInfo _iter67 : struct.blocklet_info_list)
          {
            _iter67.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.dictionary != null) {
        if (struct.isSetDictionary()) {
          oprot.writeFieldBegin(DICTIONARY_FIELD_DESC);
          struct.dictionary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileFooterTupleSchemeFactory implements SchemeFactory {
    public FileFooterTupleScheme getScheme() {
      return new FileFooterTupleScheme();
    }
  }

  private static class FileFooterTupleScheme extends TupleScheme<FileFooter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileFooter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.version);
      oprot.writeI64(struct.num_rows);
      {
        oprot.writeI32(struct.table_columns.size());
        for (org.apache.carbondata.format.ColumnSchema _iter68 : struct.table_columns)
        {
          _iter68.write(oprot);
        }
      }
      struct.segment_info.write(oprot);
      {
        oprot.writeI32(struct.blocklet_index_list.size());
        for (BlockletIndex _iter69 : struct.blocklet_index_list)
        {
          _iter69.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.blocklet_info_list.size());
        for (BlockletInfo _iter70 : struct.blocklet_info_list)
        {
          _iter70.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetDictionary()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetDictionary()) {
        struct.dictionary.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileFooter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.version = iprot.readI32();
      struct.setVersionIsSet(true);
      struct.num_rows = iprot.readI64();
      struct.setNum_rowsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.table_columns = new ArrayList<org.apache.carbondata.format.ColumnSchema>(_list71.size);
        org.apache.carbondata.format.ColumnSchema _elem72;
        for (int _i73 = 0; _i73 < _list71.size; ++_i73)
        {
          _elem72 = new org.apache.carbondata.format.ColumnSchema();
          _elem72.read(iprot);
          struct.table_columns.add(_elem72);
        }
      }
      struct.setTable_columnsIsSet(true);
      struct.segment_info = new SegmentInfo();
      struct.segment_info.read(iprot);
      struct.setSegment_infoIsSet(true);
      {
        org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.blocklet_index_list = new ArrayList<BlockletIndex>(_list74.size);
        BlockletIndex _elem75;
        for (int _i76 = 0; _i76 < _list74.size; ++_i76)
        {
          _elem75 = new BlockletIndex();
          _elem75.read(iprot);
          struct.blocklet_index_list.add(_elem75);
        }
      }
      struct.setBlocklet_index_listIsSet(true);
      {
        org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.blocklet_info_list = new ArrayList<BlockletInfo>(_list77.size);
        BlockletInfo _elem78;
        for (int _i79 = 0; _i79 < _list77.size; ++_i79)
        {
          _elem78 = new BlockletInfo();
          _elem78.read(iprot);
          struct.blocklet_info_list.add(_elem78);
        }
      }
      struct.setBlocklet_info_listIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.dictionary = new org.apache.carbondata.format.ColumnDictionaryChunk();
        struct.dictionary.read(iprot);
        struct.setDictionaryIsSet(true);
      }
    }
  }

}

