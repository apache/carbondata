/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * block index information stored in index file for every block
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class BlockIndex implements org.apache.thrift.TBase<BlockIndex, BlockIndex._Fields>, java.io.Serializable, Cloneable, Comparable<BlockIndex> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlockIndex");

  private static final org.apache.thrift.protocol.TField NUM_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_rows", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("file_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField BLOCK_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("block_index", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BlockIndexStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BlockIndexTupleSchemeFactory());
  }

  public long num_rows; // required
  public String file_name; // required
  public long offset; // required
  public org.apache.carbondata.format.BlockletIndex block_index; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_ROWS((short)1, "num_rows"),
    FILE_NAME((short)2, "file_name"),
    OFFSET((short)3, "offset"),
    BLOCK_INDEX((short)4, "block_index");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_ROWS
          return NUM_ROWS;
        case 2: // FILE_NAME
          return FILE_NAME;
        case 3: // OFFSET
          return OFFSET;
        case 4: // BLOCK_INDEX
          return BLOCK_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_ROWS_ISSET_ID = 0;
  private static final int __OFFSET_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_ROWS, new org.apache.thrift.meta_data.FieldMetaData("num_rows", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("file_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BLOCK_INDEX, new org.apache.thrift.meta_data.FieldMetaData("block_index", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.carbondata.format.BlockletIndex.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlockIndex.class, metaDataMap);
  }

  public BlockIndex() {
  }

  public BlockIndex(
    long num_rows,
    String file_name,
    long offset,
    org.apache.carbondata.format.BlockletIndex block_index)
  {
    this();
    this.num_rows = num_rows;
    setNum_rowsIsSet(true);
    this.file_name = file_name;
    this.offset = offset;
    setOffsetIsSet(true);
    this.block_index = block_index;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlockIndex(BlockIndex other) {
    __isset_bitfield = other.__isset_bitfield;
    this.num_rows = other.num_rows;
    if (other.isSetFile_name()) {
      this.file_name = other.file_name;
    }
    this.offset = other.offset;
    if (other.isSetBlock_index()) {
      this.block_index = new org.apache.carbondata.format.BlockletIndex(other.block_index);
    }
  }

  public BlockIndex deepCopy() {
    return new BlockIndex(this);
  }

  @Override
  public void clear() {
    setNum_rowsIsSet(false);
    this.num_rows = 0;
    this.file_name = null;
    setOffsetIsSet(false);
    this.offset = 0;
    this.block_index = null;
  }

  public long getNum_rows() {
    return this.num_rows;
  }

  public BlockIndex setNum_rows(long num_rows) {
    this.num_rows = num_rows;
    setNum_rowsIsSet(true);
    return this;
  }

  public void unsetNum_rows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ROWS_ISSET_ID);
  }

  /** Returns true if field num_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_rows() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ROWS_ISSET_ID);
  }

  public void setNum_rowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ROWS_ISSET_ID, value);
  }

  public String getFile_name() {
    return this.file_name;
  }

  public BlockIndex setFile_name(String file_name) {
    this.file_name = file_name;
    return this;
  }

  public void unsetFile_name() {
    this.file_name = null;
  }

  /** Returns true if field file_name is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_name() {
    return this.file_name != null;
  }

  public void setFile_nameIsSet(boolean value) {
    if (!value) {
      this.file_name = null;
    }
  }

  public long getOffset() {
    return this.offset;
  }

  public BlockIndex setOffset(long offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public org.apache.carbondata.format.BlockletIndex getBlock_index() {
    return this.block_index;
  }

  public BlockIndex setBlock_index(org.apache.carbondata.format.BlockletIndex block_index) {
    this.block_index = block_index;
    return this;
  }

  public void unsetBlock_index() {
    this.block_index = null;
  }

  /** Returns true if field block_index is set (has been assigned a value) and false otherwise */
  public boolean isSetBlock_index() {
    return this.block_index != null;
  }

  public void setBlock_indexIsSet(boolean value) {
    if (!value) {
      this.block_index = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_ROWS:
      if (value == null) {
        unsetNum_rows();
      } else {
        setNum_rows((Long)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFile_name();
      } else {
        setFile_name((String)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Long)value);
      }
      break;

    case BLOCK_INDEX:
      if (value == null) {
        unsetBlock_index();
      } else {
        setBlock_index((org.apache.carbondata.format.BlockletIndex)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_ROWS:
      return getNum_rows();

    case FILE_NAME:
      return getFile_name();

    case OFFSET:
      return getOffset();

    case BLOCK_INDEX:
      return getBlock_index();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_ROWS:
      return isSetNum_rows();
    case FILE_NAME:
      return isSetFile_name();
    case OFFSET:
      return isSetOffset();
    case BLOCK_INDEX:
      return isSetBlock_index();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlockIndex)
      return this.equals((BlockIndex)that);
    return false;
  }

  public boolean equals(BlockIndex that) {
    if (that == null)
      return false;

    boolean this_present_num_rows = true;
    boolean that_present_num_rows = true;
    if (this_present_num_rows || that_present_num_rows) {
      if (!(this_present_num_rows && that_present_num_rows))
        return false;
      if (this.num_rows != that.num_rows)
        return false;
    }

    boolean this_present_file_name = true && this.isSetFile_name();
    boolean that_present_file_name = true && that.isSetFile_name();
    if (this_present_file_name || that_present_file_name) {
      if (!(this_present_file_name && that_present_file_name))
        return false;
      if (!this.file_name.equals(that.file_name))
        return false;
    }

    boolean this_present_offset = true;
    boolean that_present_offset = true;
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_block_index = true && this.isSetBlock_index();
    boolean that_present_block_index = true && that.isSetBlock_index();
    if (this_present_block_index || that_present_block_index) {
      if (!(this_present_block_index && that_present_block_index))
        return false;
      if (!this.block_index.equals(that.block_index))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_num_rows = true;
    list.add(present_num_rows);
    if (present_num_rows)
      list.add(num_rows);

    boolean present_file_name = true && (isSetFile_name());
    list.add(present_file_name);
    if (present_file_name)
      list.add(file_name);

    boolean present_offset = true;
    list.add(present_offset);
    if (present_offset)
      list.add(offset);

    boolean present_block_index = true && (isSetBlock_index());
    list.add(present_block_index);
    if (present_block_index)
      list.add(block_index);

    return list.hashCode();
  }

  @Override
  public int compareTo(BlockIndex other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNum_rows()).compareTo(other.isSetNum_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_rows, other.num_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile_name()).compareTo(other.isSetFile_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_name, other.file_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlock_index()).compareTo(other.isSetBlock_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlock_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.block_index, other.block_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlockIndex(");
    boolean first = true;

    sb.append("num_rows:");
    sb.append(this.num_rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("file_name:");
    if (this.file_name == null) {
      sb.append("null");
    } else {
      sb.append(this.file_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offset:");
    sb.append(this.offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("block_index:");
    if (this.block_index == null) {
      sb.append("null");
    } else {
      sb.append(this.block_index);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'num_rows' because it's a primitive and you chose the non-beans generator.
    if (file_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'offset' because it's a primitive and you chose the non-beans generator.
    if (block_index == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'block_index' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (block_index != null) {
      block_index.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BlockIndexStandardSchemeFactory implements SchemeFactory {
    public BlockIndexStandardScheme getScheme() {
      return new BlockIndexStandardScheme();
    }
  }

  private static class BlockIndexStandardScheme extends StandardScheme<BlockIndex> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BlockIndex struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_rows = iprot.readI64();
              struct.setNum_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file_name = iprot.readString();
              struct.setFile_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset = iprot.readI64();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BLOCK_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.block_index = new org.apache.carbondata.format.BlockletIndex();
              struct.block_index.read(iprot);
              struct.setBlock_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNum_rows()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_rows' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOffset()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'offset' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BlockIndex struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_ROWS_FIELD_DESC);
      oprot.writeI64(struct.num_rows);
      oprot.writeFieldEnd();
      if (struct.file_name != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.file_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI64(struct.offset);
      oprot.writeFieldEnd();
      if (struct.block_index != null) {
        oprot.writeFieldBegin(BLOCK_INDEX_FIELD_DESC);
        struct.block_index.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BlockIndexTupleSchemeFactory implements SchemeFactory {
    public BlockIndexTupleScheme getScheme() {
      return new BlockIndexTupleScheme();
    }
  }

  private static class BlockIndexTupleScheme extends TupleScheme<BlockIndex> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BlockIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.num_rows);
      oprot.writeString(struct.file_name);
      oprot.writeI64(struct.offset);
      struct.block_index.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BlockIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.num_rows = iprot.readI64();
      struct.setNum_rowsIsSet(true);
      struct.file_name = iprot.readString();
      struct.setFile_nameIsSet(true);
      struct.offset = iprot.readI64();
      struct.setOffsetIsSet(true);
      struct.block_index = new org.apache.carbondata.format.BlockletIndex();
      struct.block_index.read(iprot);
      struct.setBlock_indexIsSet(true);
    }
  }

}

