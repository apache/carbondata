/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class ColumnSortInfo implements org.apache.thrift.TBase<ColumnSortInfo, ColumnSortInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ColumnSortInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnSortInfo");

  private static final org.apache.thrift.protocol.TField SORT_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_index", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SORT_INDEX_INVERTED_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_index_inverted", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ColumnSortInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ColumnSortInfoTupleSchemeFactory());
  }

  public List<Integer> sort_index; // required
  public List<Integer> sort_index_inverted; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SORT_INDEX((short)1, "sort_index"),
    SORT_INDEX_INVERTED((short)2, "sort_index_inverted");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SORT_INDEX
          return SORT_INDEX;
        case 2: // SORT_INDEX_INVERTED
          return SORT_INDEX_INVERTED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SORT_INDEX, new org.apache.thrift.meta_data.FieldMetaData("sort_index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SORT_INDEX_INVERTED, new org.apache.thrift.meta_data.FieldMetaData("sort_index_inverted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnSortInfo.class, metaDataMap);
  }

  public ColumnSortInfo() {
  }

  public ColumnSortInfo(
    List<Integer> sort_index,
    List<Integer> sort_index_inverted)
  {
    this();
    this.sort_index = sort_index;
    this.sort_index_inverted = sort_index_inverted;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ColumnSortInfo(ColumnSortInfo other) {
    if (other.isSetSort_index()) {
      List<Integer> __this__sort_index = new ArrayList<Integer>(other.sort_index);
      this.sort_index = __this__sort_index;
    }
    if (other.isSetSort_index_inverted()) {
      List<Integer> __this__sort_index_inverted = new ArrayList<Integer>(other.sort_index_inverted);
      this.sort_index_inverted = __this__sort_index_inverted;
    }
  }

  public ColumnSortInfo deepCopy() {
    return new ColumnSortInfo(this);
  }

  @Override
  public void clear() {
    this.sort_index = null;
    this.sort_index_inverted = null;
  }

  public int getSort_indexSize() {
    return (this.sort_index == null) ? 0 : this.sort_index.size();
  }

  public java.util.Iterator<Integer> getSort_indexIterator() {
    return (this.sort_index == null) ? null : this.sort_index.iterator();
  }

  public void addToSort_index(int elem) {
    if (this.sort_index == null) {
      this.sort_index = new ArrayList<Integer>();
    }
    this.sort_index.add(elem);
  }

  public List<Integer> getSort_index() {
    return this.sort_index;
  }

  public ColumnSortInfo setSort_index(List<Integer> sort_index) {
    this.sort_index = sort_index;
    return this;
  }

  public void unsetSort_index() {
    this.sort_index = null;
  }

  /** Returns true if field sort_index is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_index() {
    return this.sort_index != null;
  }

  public void setSort_indexIsSet(boolean value) {
    if (!value) {
      this.sort_index = null;
    }
  }

  public int getSort_index_invertedSize() {
    return (this.sort_index_inverted == null) ? 0 : this.sort_index_inverted.size();
  }

  public java.util.Iterator<Integer> getSort_index_invertedIterator() {
    return (this.sort_index_inverted == null) ? null : this.sort_index_inverted.iterator();
  }

  public void addToSort_index_inverted(int elem) {
    if (this.sort_index_inverted == null) {
      this.sort_index_inverted = new ArrayList<Integer>();
    }
    this.sort_index_inverted.add(elem);
  }

  public List<Integer> getSort_index_inverted() {
    return this.sort_index_inverted;
  }

  public ColumnSortInfo setSort_index_inverted(List<Integer> sort_index_inverted) {
    this.sort_index_inverted = sort_index_inverted;
    return this;
  }

  public void unsetSort_index_inverted() {
    this.sort_index_inverted = null;
  }

  /** Returns true if field sort_index_inverted is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_index_inverted() {
    return this.sort_index_inverted != null;
  }

  public void setSort_index_invertedIsSet(boolean value) {
    if (!value) {
      this.sort_index_inverted = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SORT_INDEX:
      if (value == null) {
        unsetSort_index();
      } else {
        setSort_index((List<Integer>)value);
      }
      break;

    case SORT_INDEX_INVERTED:
      if (value == null) {
        unsetSort_index_inverted();
      } else {
        setSort_index_inverted((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SORT_INDEX:
      return getSort_index();

    case SORT_INDEX_INVERTED:
      return getSort_index_inverted();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SORT_INDEX:
      return isSetSort_index();
    case SORT_INDEX_INVERTED:
      return isSetSort_index_inverted();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ColumnSortInfo)
      return this.equals((ColumnSortInfo)that);
    return false;
  }

  public boolean equals(ColumnSortInfo that) {
    if (that == null)
      return false;

    boolean this_present_sort_index = true && this.isSetSort_index();
    boolean that_present_sort_index = true && that.isSetSort_index();
    if (this_present_sort_index || that_present_sort_index) {
      if (!(this_present_sort_index && that_present_sort_index))
        return false;
      if (!this.sort_index.equals(that.sort_index))
        return false;
    }

    boolean this_present_sort_index_inverted = true && this.isSetSort_index_inverted();
    boolean that_present_sort_index_inverted = true && that.isSetSort_index_inverted();
    if (this_present_sort_index_inverted || that_present_sort_index_inverted) {
      if (!(this_present_sort_index_inverted && that_present_sort_index_inverted))
        return false;
      if (!this.sort_index_inverted.equals(that.sort_index_inverted))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sort_index = true && (isSetSort_index());
    list.add(present_sort_index);
    if (present_sort_index)
      list.add(sort_index);

    boolean present_sort_index_inverted = true && (isSetSort_index_inverted());
    list.add(present_sort_index_inverted);
    if (present_sort_index_inverted)
      list.add(sort_index_inverted);

    return list.hashCode();
  }

  @Override
  public int compareTo(ColumnSortInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSort_index()).compareTo(other.isSetSort_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_index, other.sort_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSort_index_inverted()).compareTo(other.isSetSort_index_inverted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_index_inverted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_index_inverted, other.sort_index_inverted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ColumnSortInfo(");
    boolean first = true;

    sb.append("sort_index:");
    if (this.sort_index == null) {
      sb.append("null");
    } else {
      sb.append(this.sort_index);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sort_index_inverted:");
    if (this.sort_index_inverted == null) {
      sb.append("null");
    } else {
      sb.append(this.sort_index_inverted);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ColumnSortInfoStandardSchemeFactory implements SchemeFactory {
    public ColumnSortInfoStandardScheme getScheme() {
      return new ColumnSortInfoStandardScheme();
    }
  }

  private static class ColumnSortInfoStandardScheme extends StandardScheme<ColumnSortInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ColumnSortInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SORT_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.sort_index = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.sort_index.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setSort_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SORT_INDEX_INVERTED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.sort_index_inverted = new ArrayList<Integer>(_list3.size);
                int _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI32();
                  struct.sort_index_inverted.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setSort_index_invertedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ColumnSortInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sort_index != null) {
        oprot.writeFieldBegin(SORT_INDEX_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sort_index.size()));
          for (int _iter6 : struct.sort_index)
          {
            oprot.writeI32(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sort_index_inverted != null) {
        oprot.writeFieldBegin(SORT_INDEX_INVERTED_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sort_index_inverted.size()));
          for (int _iter7 : struct.sort_index_inverted)
          {
            oprot.writeI32(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ColumnSortInfoTupleSchemeFactory implements SchemeFactory {
    public ColumnSortInfoTupleScheme getScheme() {
      return new ColumnSortInfoTupleScheme();
    }
  }

  private static class ColumnSortInfoTupleScheme extends TupleScheme<ColumnSortInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ColumnSortInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSort_index()) {
        optionals.set(0);
      }
      if (struct.isSetSort_index_inverted()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSort_index()) {
        {
          oprot.writeI32(struct.sort_index.size());
          for (int _iter8 : struct.sort_index)
          {
            oprot.writeI32(_iter8);
          }
        }
      }
      if (struct.isSetSort_index_inverted()) {
        {
          oprot.writeI32(struct.sort_index_inverted.size());
          for (int _iter9 : struct.sort_index_inverted)
          {
            oprot.writeI32(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ColumnSortInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.sort_index = new ArrayList<Integer>(_list10.size);
          int _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readI32();
            struct.sort_index.add(_elem11);
          }
        }
        struct.setSort_indexIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.sort_index_inverted = new ArrayList<Integer>(_list13.size);
          int _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readI32();
            struct.sort_index_inverted.add(_elem14);
          }
        }
        struct.setSort_index_invertedIsSet(true);
      }
    }
  }

}

