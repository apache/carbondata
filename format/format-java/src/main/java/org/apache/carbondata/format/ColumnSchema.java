/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Description of a Column for both dimension and measure
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class ColumnSchema implements org.apache.thrift.TBase<ColumnSchema, ColumnSchema._Fields>, java.io.Serializable, Cloneable, Comparable<ColumnSchema> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnSchema");

  private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("data_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("column_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("column_id", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COLUMNAR_FIELD_DESC = new org.apache.thrift.protocol.TField("columnar", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField ENCODERS_FIELD_DESC = new org.apache.thrift.protocol.TField("encoders", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField DIMENSION_FIELD_DESC = new org.apache.thrift.protocol.TField("dimension", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField COLUMN_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("column_group_id", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("scale", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("precision", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField NUM_CHILD_FIELD_DESC = new org.apache.thrift.protocol.TField("num_child", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField AGGREGATE_FUNCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregate_function", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DEFAULT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("default_value", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField COLUMN_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("columnProperties", org.apache.thrift.protocol.TType.MAP, (short)13);
  private static final org.apache.thrift.protocol.TField INVISIBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("invisible", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField COLUMN_REFERENCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("columnReferenceId", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ColumnSchemaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ColumnSchemaTupleSchemeFactory());
  }

  /**
   * 
   * @see DataType
   */
  public DataType data_type; // required
  /**
   * Name of the column. If it is a complex data type, we follow a naming rule grand_parent_column.parent_column.child_column
   * For Array types, two columns will be stored one for the array type and one for the primitive type with the name parent_column.value
   */
  public String column_name; // required
  public String column_id; // required
  public boolean columnar; // required
  public List<Encoding> encoders; // required
  public boolean dimension; // required
  public int column_group_id; // optional
  /**
   * Used when this column contains decimal data.
   */
  public int scale; // optional
  public int precision; // optional
  /**
   * Nested fields.  Since thrift does not support nested fields,
   * the nesting is flattened to a single list by a depth-first traversal.
   * The children count is used to construct the nested relationship.
   * This field is not set when the element is a primitive type
   */
  public int num_child; // optional
  /**
   * Used when this column is part of an aggregate table.
   */
  public String aggregate_function; // optional
  public ByteBuffer default_value; // optional
  public Map<String,String> columnProperties; // optional
  /**
   * To specify the visibily of the column by default its false
   */
  public boolean invisible; // optional
  /**
   * column reference id
   */
  public String columnReferenceId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see DataType
     */
    DATA_TYPE((short)1, "data_type"),
    /**
     * Name of the column. If it is a complex data type, we follow a naming rule grand_parent_column.parent_column.child_column
     * For Array types, two columns will be stored one for the array type and one for the primitive type with the name parent_column.value
     */
    COLUMN_NAME((short)2, "column_name"),
    COLUMN_ID((short)3, "column_id"),
    COLUMNAR((short)4, "columnar"),
    ENCODERS((short)5, "encoders"),
    DIMENSION((short)6, "dimension"),
    COLUMN_GROUP_ID((short)7, "column_group_id"),
    /**
     * Used when this column contains decimal data.
     */
    SCALE((short)8, "scale"),
    PRECISION((short)9, "precision"),
    /**
     * Nested fields.  Since thrift does not support nested fields,
     * the nesting is flattened to a single list by a depth-first traversal.
     * The children count is used to construct the nested relationship.
     * This field is not set when the element is a primitive type
     */
    NUM_CHILD((short)10, "num_child"),
    /**
     * Used when this column is part of an aggregate table.
     */
    AGGREGATE_FUNCTION((short)11, "aggregate_function"),
    DEFAULT_VALUE((short)12, "default_value"),
    COLUMN_PROPERTIES((short)13, "columnProperties"),
    /**
     * To specify the visibily of the column by default its false
     */
    INVISIBLE((short)14, "invisible"),
    /**
     * column reference id
     */
    COLUMN_REFERENCE_ID((short)15, "columnReferenceId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA_TYPE
          return DATA_TYPE;
        case 2: // COLUMN_NAME
          return COLUMN_NAME;
        case 3: // COLUMN_ID
          return COLUMN_ID;
        case 4: // COLUMNAR
          return COLUMNAR;
        case 5: // ENCODERS
          return ENCODERS;
        case 6: // DIMENSION
          return DIMENSION;
        case 7: // COLUMN_GROUP_ID
          return COLUMN_GROUP_ID;
        case 8: // SCALE
          return SCALE;
        case 9: // PRECISION
          return PRECISION;
        case 10: // NUM_CHILD
          return NUM_CHILD;
        case 11: // AGGREGATE_FUNCTION
          return AGGREGATE_FUNCTION;
        case 12: // DEFAULT_VALUE
          return DEFAULT_VALUE;
        case 13: // COLUMN_PROPERTIES
          return COLUMN_PROPERTIES;
        case 14: // INVISIBLE
          return INVISIBLE;
        case 15: // COLUMN_REFERENCE_ID
          return COLUMN_REFERENCE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COLUMNAR_ISSET_ID = 0;
  private static final int __DIMENSION_ISSET_ID = 1;
  private static final int __COLUMN_GROUP_ID_ISSET_ID = 2;
  private static final int __SCALE_ISSET_ID = 3;
  private static final int __PRECISION_ISSET_ID = 4;
  private static final int __NUM_CHILD_ISSET_ID = 5;
  private static final int __INVISIBLE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COLUMN_GROUP_ID,_Fields.SCALE,_Fields.PRECISION,_Fields.NUM_CHILD,_Fields.AGGREGATE_FUNCTION,_Fields.DEFAULT_VALUE,_Fields.COLUMN_PROPERTIES,_Fields.INVISIBLE,_Fields.COLUMN_REFERENCE_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("data_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DataType.class)));
    tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("column_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_ID, new org.apache.thrift.meta_data.FieldMetaData("column_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMNAR, new org.apache.thrift.meta_data.FieldMetaData("columnar", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENCODERS, new org.apache.thrift.meta_data.FieldMetaData("encoders", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Encoding.class))));
    tmpMap.put(_Fields.DIMENSION, new org.apache.thrift.meta_data.FieldMetaData("dimension", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COLUMN_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("column_group_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCALE, new org.apache.thrift.meta_data.FieldMetaData("scale", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRECISION, new org.apache.thrift.meta_data.FieldMetaData("precision", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_CHILD, new org.apache.thrift.meta_data.FieldMetaData("num_child", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AGGREGATE_FUNCTION, new org.apache.thrift.meta_data.FieldMetaData("aggregate_function", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFAULT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("default_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.COLUMN_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("columnProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INVISIBLE, new org.apache.thrift.meta_data.FieldMetaData("invisible", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COLUMN_REFERENCE_ID, new org.apache.thrift.meta_data.FieldMetaData("columnReferenceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnSchema.class, metaDataMap);
  }

  public ColumnSchema() {
  }

  public ColumnSchema(
    DataType data_type,
    String column_name,
    String column_id,
    boolean columnar,
    List<Encoding> encoders,
    boolean dimension)
  {
    this();
    this.data_type = data_type;
    this.column_name = column_name;
    this.column_id = column_id;
    this.columnar = columnar;
    setColumnarIsSet(true);
    this.encoders = encoders;
    this.dimension = dimension;
    setDimensionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ColumnSchema(ColumnSchema other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetData_type()) {
      this.data_type = other.data_type;
    }
    if (other.isSetColumn_name()) {
      this.column_name = other.column_name;
    }
    if (other.isSetColumn_id()) {
      this.column_id = other.column_id;
    }
    this.columnar = other.columnar;
    if (other.isSetEncoders()) {
      List<Encoding> __this__encoders = new ArrayList<Encoding>(other.encoders.size());
      for (Encoding other_element : other.encoders) {
        __this__encoders.add(other_element);
      }
      this.encoders = __this__encoders;
    }
    this.dimension = other.dimension;
    this.column_group_id = other.column_group_id;
    this.scale = other.scale;
    this.precision = other.precision;
    this.num_child = other.num_child;
    if (other.isSetAggregate_function()) {
      this.aggregate_function = other.aggregate_function;
    }
    if (other.isSetDefault_value()) {
      this.default_value = org.apache.thrift.TBaseHelper.copyBinary(other.default_value);
    }
    if (other.isSetColumnProperties()) {
      Map<String,String> __this__columnProperties = new HashMap<String,String>(other.columnProperties);
      this.columnProperties = __this__columnProperties;
    }
    this.invisible = other.invisible;
    if (other.isSetColumnReferenceId()) {
      this.columnReferenceId = other.columnReferenceId;
    }
  }

  public ColumnSchema deepCopy() {
    return new ColumnSchema(this);
  }

  @Override
  public void clear() {
    this.data_type = null;
    this.column_name = null;
    this.column_id = null;
    setColumnarIsSet(false);
    this.columnar = false;
    this.encoders = null;
    setDimensionIsSet(false);
    this.dimension = false;
    setColumn_group_idIsSet(false);
    this.column_group_id = 0;
    setScaleIsSet(false);
    this.scale = 0;
    setPrecisionIsSet(false);
    this.precision = 0;
    setNum_childIsSet(false);
    this.num_child = 0;
    this.aggregate_function = null;
    this.default_value = null;
    this.columnProperties = null;
    setInvisibleIsSet(false);
    this.invisible = false;
    this.columnReferenceId = null;
  }

  /**
   * 
   * @see DataType
   */
  public DataType getData_type() {
    return this.data_type;
  }

  /**
   * 
   * @see DataType
   */
  public ColumnSchema setData_type(DataType data_type) {
    this.data_type = data_type;
    return this;
  }

  public void unsetData_type() {
    this.data_type = null;
  }

  /** Returns true if field data_type is set (has been assigned a value) and false otherwise */
  public boolean isSetData_type() {
    return this.data_type != null;
  }

  public void setData_typeIsSet(boolean value) {
    if (!value) {
      this.data_type = null;
    }
  }

  /**
   * Name of the column. If it is a complex data type, we follow a naming rule grand_parent_column.parent_column.child_column
   * For Array types, two columns will be stored one for the array type and one for the primitive type with the name parent_column.value
   */
  public String getColumn_name() {
    return this.column_name;
  }

  /**
   * Name of the column. If it is a complex data type, we follow a naming rule grand_parent_column.parent_column.child_column
   * For Array types, two columns will be stored one for the array type and one for the primitive type with the name parent_column.value
   */
  public ColumnSchema setColumn_name(String column_name) {
    this.column_name = column_name;
    return this;
  }

  public void unsetColumn_name() {
    this.column_name = null;
  }

  /** Returns true if field column_name is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_name() {
    return this.column_name != null;
  }

  public void setColumn_nameIsSet(boolean value) {
    if (!value) {
      this.column_name = null;
    }
  }

  public String getColumn_id() {
    return this.column_id;
  }

  public ColumnSchema setColumn_id(String column_id) {
    this.column_id = column_id;
    return this;
  }

  public void unsetColumn_id() {
    this.column_id = null;
  }

  /** Returns true if field column_id is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_id() {
    return this.column_id != null;
  }

  public void setColumn_idIsSet(boolean value) {
    if (!value) {
      this.column_id = null;
    }
  }

  public boolean isColumnar() {
    return this.columnar;
  }

  public ColumnSchema setColumnar(boolean columnar) {
    this.columnar = columnar;
    setColumnarIsSet(true);
    return this;
  }

  public void unsetColumnar() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMNAR_ISSET_ID);
  }

  /** Returns true if field columnar is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnar() {
    return EncodingUtils.testBit(__isset_bitfield, __COLUMNAR_ISSET_ID);
  }

  public void setColumnarIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMNAR_ISSET_ID, value);
  }

  public int getEncodersSize() {
    return (this.encoders == null) ? 0 : this.encoders.size();
  }

  public java.util.Iterator<Encoding> getEncodersIterator() {
    return (this.encoders == null) ? null : this.encoders.iterator();
  }

  public void addToEncoders(Encoding elem) {
    if (this.encoders == null) {
      this.encoders = new ArrayList<Encoding>();
    }
    this.encoders.add(elem);
  }

  public List<Encoding> getEncoders() {
    return this.encoders;
  }

  public ColumnSchema setEncoders(List<Encoding> encoders) {
    this.encoders = encoders;
    return this;
  }

  public void unsetEncoders() {
    this.encoders = null;
  }

  /** Returns true if field encoders is set (has been assigned a value) and false otherwise */
  public boolean isSetEncoders() {
    return this.encoders != null;
  }

  public void setEncodersIsSet(boolean value) {
    if (!value) {
      this.encoders = null;
    }
  }

  public boolean isDimension() {
    return this.dimension;
  }

  public ColumnSchema setDimension(boolean dimension) {
    this.dimension = dimension;
    setDimensionIsSet(true);
    return this;
  }

  public void unsetDimension() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIMENSION_ISSET_ID);
  }

  /** Returns true if field dimension is set (has been assigned a value) and false otherwise */
  public boolean isSetDimension() {
    return EncodingUtils.testBit(__isset_bitfield, __DIMENSION_ISSET_ID);
  }

  public void setDimensionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIMENSION_ISSET_ID, value);
  }

  public int getColumn_group_id() {
    return this.column_group_id;
  }

  public ColumnSchema setColumn_group_id(int column_group_id) {
    this.column_group_id = column_group_id;
    setColumn_group_idIsSet(true);
    return this;
  }

  public void unsetColumn_group_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMN_GROUP_ID_ISSET_ID);
  }

  /** Returns true if field column_group_id is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_group_id() {
    return EncodingUtils.testBit(__isset_bitfield, __COLUMN_GROUP_ID_ISSET_ID);
  }

  public void setColumn_group_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMN_GROUP_ID_ISSET_ID, value);
  }

  /**
   * Used when this column contains decimal data.
   */
  public int getScale() {
    return this.scale;
  }

  /**
   * Used when this column contains decimal data.
   */
  public ColumnSchema setScale(int scale) {
    this.scale = scale;
    setScaleIsSet(true);
    return this;
  }

  public void unsetScale() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCALE_ISSET_ID);
  }

  /** Returns true if field scale is set (has been assigned a value) and false otherwise */
  public boolean isSetScale() {
    return EncodingUtils.testBit(__isset_bitfield, __SCALE_ISSET_ID);
  }

  public void setScaleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCALE_ISSET_ID, value);
  }

  public int getPrecision() {
    return this.precision;
  }

  public ColumnSchema setPrecision(int precision) {
    this.precision = precision;
    setPrecisionIsSet(true);
    return this;
  }

  public void unsetPrecision() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRECISION_ISSET_ID);
  }

  /** Returns true if field precision is set (has been assigned a value) and false otherwise */
  public boolean isSetPrecision() {
    return EncodingUtils.testBit(__isset_bitfield, __PRECISION_ISSET_ID);
  }

  public void setPrecisionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRECISION_ISSET_ID, value);
  }

  /**
   * Nested fields.  Since thrift does not support nested fields,
   * the nesting is flattened to a single list by a depth-first traversal.
   * The children count is used to construct the nested relationship.
   * This field is not set when the element is a primitive type
   */
  public int getNum_child() {
    return this.num_child;
  }

  /**
   * Nested fields.  Since thrift does not support nested fields,
   * the nesting is flattened to a single list by a depth-first traversal.
   * The children count is used to construct the nested relationship.
   * This field is not set when the element is a primitive type
   */
  public ColumnSchema setNum_child(int num_child) {
    this.num_child = num_child;
    setNum_childIsSet(true);
    return this;
  }

  public void unsetNum_child() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_CHILD_ISSET_ID);
  }

  /** Returns true if field num_child is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_child() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_CHILD_ISSET_ID);
  }

  public void setNum_childIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_CHILD_ISSET_ID, value);
  }

  /**
   * Used when this column is part of an aggregate table.
   */
  public String getAggregate_function() {
    return this.aggregate_function;
  }

  /**
   * Used when this column is part of an aggregate table.
   */
  public ColumnSchema setAggregate_function(String aggregate_function) {
    this.aggregate_function = aggregate_function;
    return this;
  }

  public void unsetAggregate_function() {
    this.aggregate_function = null;
  }

  /** Returns true if field aggregate_function is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregate_function() {
    return this.aggregate_function != null;
  }

  public void setAggregate_functionIsSet(boolean value) {
    if (!value) {
      this.aggregate_function = null;
    }
  }

  public byte[] getDefault_value() {
    setDefault_value(org.apache.thrift.TBaseHelper.rightSize(default_value));
    return default_value == null ? null : default_value.array();
  }

  public ByteBuffer bufferForDefault_value() {
    return org.apache.thrift.TBaseHelper.copyBinary(default_value);
  }

  public ColumnSchema setDefault_value(byte[] default_value) {
    this.default_value = default_value == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(default_value, default_value.length));
    return this;
  }

  public ColumnSchema setDefault_value(ByteBuffer default_value) {
    this.default_value = org.apache.thrift.TBaseHelper.copyBinary(default_value);
    return this;
  }

  public void unsetDefault_value() {
    this.default_value = null;
  }

  /** Returns true if field default_value is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_value() {
    return this.default_value != null;
  }

  public void setDefault_valueIsSet(boolean value) {
    if (!value) {
      this.default_value = null;
    }
  }

  public int getColumnPropertiesSize() {
    return (this.columnProperties == null) ? 0 : this.columnProperties.size();
  }

  public void putToColumnProperties(String key, String val) {
    if (this.columnProperties == null) {
      this.columnProperties = new HashMap<String,String>();
    }
    this.columnProperties.put(key, val);
  }

  public Map<String,String> getColumnProperties() {
    return this.columnProperties;
  }

  public ColumnSchema setColumnProperties(Map<String,String> columnProperties) {
    this.columnProperties = columnProperties;
    return this;
  }

  public void unsetColumnProperties() {
    this.columnProperties = null;
  }

  /** Returns true if field columnProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnProperties() {
    return this.columnProperties != null;
  }

  public void setColumnPropertiesIsSet(boolean value) {
    if (!value) {
      this.columnProperties = null;
    }
  }

  /**
   * To specify the visibily of the column by default its false
   */
  public boolean isInvisible() {
    return this.invisible;
  }

  /**
   * To specify the visibily of the column by default its false
   */
  public ColumnSchema setInvisible(boolean invisible) {
    this.invisible = invisible;
    setInvisibleIsSet(true);
    return this;
  }

  public void unsetInvisible() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVISIBLE_ISSET_ID);
  }

  /** Returns true if field invisible is set (has been assigned a value) and false otherwise */
  public boolean isSetInvisible() {
    return EncodingUtils.testBit(__isset_bitfield, __INVISIBLE_ISSET_ID);
  }

  public void setInvisibleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVISIBLE_ISSET_ID, value);
  }

  /**
   * column reference id
   */
  public String getColumnReferenceId() {
    return this.columnReferenceId;
  }

  /**
   * column reference id
   */
  public ColumnSchema setColumnReferenceId(String columnReferenceId) {
    this.columnReferenceId = columnReferenceId;
    return this;
  }

  public void unsetColumnReferenceId() {
    this.columnReferenceId = null;
  }

  /** Returns true if field columnReferenceId is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnReferenceId() {
    return this.columnReferenceId != null;
  }

  public void setColumnReferenceIdIsSet(boolean value) {
    if (!value) {
      this.columnReferenceId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATA_TYPE:
      if (value == null) {
        unsetData_type();
      } else {
        setData_type((DataType)value);
      }
      break;

    case COLUMN_NAME:
      if (value == null) {
        unsetColumn_name();
      } else {
        setColumn_name((String)value);
      }
      break;

    case COLUMN_ID:
      if (value == null) {
        unsetColumn_id();
      } else {
        setColumn_id((String)value);
      }
      break;

    case COLUMNAR:
      if (value == null) {
        unsetColumnar();
      } else {
        setColumnar((Boolean)value);
      }
      break;

    case ENCODERS:
      if (value == null) {
        unsetEncoders();
      } else {
        setEncoders((List<Encoding>)value);
      }
      break;

    case DIMENSION:
      if (value == null) {
        unsetDimension();
      } else {
        setDimension((Boolean)value);
      }
      break;

    case COLUMN_GROUP_ID:
      if (value == null) {
        unsetColumn_group_id();
      } else {
        setColumn_group_id((Integer)value);
      }
      break;

    case SCALE:
      if (value == null) {
        unsetScale();
      } else {
        setScale((Integer)value);
      }
      break;

    case PRECISION:
      if (value == null) {
        unsetPrecision();
      } else {
        setPrecision((Integer)value);
      }
      break;

    case NUM_CHILD:
      if (value == null) {
        unsetNum_child();
      } else {
        setNum_child((Integer)value);
      }
      break;

    case AGGREGATE_FUNCTION:
      if (value == null) {
        unsetAggregate_function();
      } else {
        setAggregate_function((String)value);
      }
      break;

    case DEFAULT_VALUE:
      if (value == null) {
        unsetDefault_value();
      } else {
        setDefault_value((ByteBuffer)value);
      }
      break;

    case COLUMN_PROPERTIES:
      if (value == null) {
        unsetColumnProperties();
      } else {
        setColumnProperties((Map<String,String>)value);
      }
      break;

    case INVISIBLE:
      if (value == null) {
        unsetInvisible();
      } else {
        setInvisible((Boolean)value);
      }
      break;

    case COLUMN_REFERENCE_ID:
      if (value == null) {
        unsetColumnReferenceId();
      } else {
        setColumnReferenceId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA_TYPE:
      return getData_type();

    case COLUMN_NAME:
      return getColumn_name();

    case COLUMN_ID:
      return getColumn_id();

    case COLUMNAR:
      return isColumnar();

    case ENCODERS:
      return getEncoders();

    case DIMENSION:
      return isDimension();

    case COLUMN_GROUP_ID:
      return getColumn_group_id();

    case SCALE:
      return getScale();

    case PRECISION:
      return getPrecision();

    case NUM_CHILD:
      return getNum_child();

    case AGGREGATE_FUNCTION:
      return getAggregate_function();

    case DEFAULT_VALUE:
      return getDefault_value();

    case COLUMN_PROPERTIES:
      return getColumnProperties();

    case INVISIBLE:
      return isInvisible();

    case COLUMN_REFERENCE_ID:
      return getColumnReferenceId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATA_TYPE:
      return isSetData_type();
    case COLUMN_NAME:
      return isSetColumn_name();
    case COLUMN_ID:
      return isSetColumn_id();
    case COLUMNAR:
      return isSetColumnar();
    case ENCODERS:
      return isSetEncoders();
    case DIMENSION:
      return isSetDimension();
    case COLUMN_GROUP_ID:
      return isSetColumn_group_id();
    case SCALE:
      return isSetScale();
    case PRECISION:
      return isSetPrecision();
    case NUM_CHILD:
      return isSetNum_child();
    case AGGREGATE_FUNCTION:
      return isSetAggregate_function();
    case DEFAULT_VALUE:
      return isSetDefault_value();
    case COLUMN_PROPERTIES:
      return isSetColumnProperties();
    case INVISIBLE:
      return isSetInvisible();
    case COLUMN_REFERENCE_ID:
      return isSetColumnReferenceId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ColumnSchema)
      return this.equals((ColumnSchema)that);
    return false;
  }

  public boolean equals(ColumnSchema that) {
    if (that == null)
      return false;

    boolean this_present_data_type = true && this.isSetData_type();
    boolean that_present_data_type = true && that.isSetData_type();
    if (this_present_data_type || that_present_data_type) {
      if (!(this_present_data_type && that_present_data_type))
        return false;
      if (!this.data_type.equals(that.data_type))
        return false;
    }

    boolean this_present_column_name = true && this.isSetColumn_name();
    boolean that_present_column_name = true && that.isSetColumn_name();
    if (this_present_column_name || that_present_column_name) {
      if (!(this_present_column_name && that_present_column_name))
        return false;
      if (!this.column_name.equals(that.column_name))
        return false;
    }

    boolean this_present_column_id = true && this.isSetColumn_id();
    boolean that_present_column_id = true && that.isSetColumn_id();
    if (this_present_column_id || that_present_column_id) {
      if (!(this_present_column_id && that_present_column_id))
        return false;
      if (!this.column_id.equals(that.column_id))
        return false;
    }

    boolean this_present_columnar = true;
    boolean that_present_columnar = true;
    if (this_present_columnar || that_present_columnar) {
      if (!(this_present_columnar && that_present_columnar))
        return false;
      if (this.columnar != that.columnar)
        return false;
    }

    boolean this_present_encoders = true && this.isSetEncoders();
    boolean that_present_encoders = true && that.isSetEncoders();
    if (this_present_encoders || that_present_encoders) {
      if (!(this_present_encoders && that_present_encoders))
        return false;
      if (!this.encoders.equals(that.encoders))
        return false;
    }

    boolean this_present_dimension = true;
    boolean that_present_dimension = true;
    if (this_present_dimension || that_present_dimension) {
      if (!(this_present_dimension && that_present_dimension))
        return false;
      if (this.dimension != that.dimension)
        return false;
    }

    boolean this_present_column_group_id = true && this.isSetColumn_group_id();
    boolean that_present_column_group_id = true && that.isSetColumn_group_id();
    if (this_present_column_group_id || that_present_column_group_id) {
      if (!(this_present_column_group_id && that_present_column_group_id))
        return false;
      if (this.column_group_id != that.column_group_id)
        return false;
    }

    boolean this_present_scale = true && this.isSetScale();
    boolean that_present_scale = true && that.isSetScale();
    if (this_present_scale || that_present_scale) {
      if (!(this_present_scale && that_present_scale))
        return false;
      if (this.scale != that.scale)
        return false;
    }

    boolean this_present_precision = true && this.isSetPrecision();
    boolean that_present_precision = true && that.isSetPrecision();
    if (this_present_precision || that_present_precision) {
      if (!(this_present_precision && that_present_precision))
        return false;
      if (this.precision != that.precision)
        return false;
    }

    boolean this_present_num_child = true && this.isSetNum_child();
    boolean that_present_num_child = true && that.isSetNum_child();
    if (this_present_num_child || that_present_num_child) {
      if (!(this_present_num_child && that_present_num_child))
        return false;
      if (this.num_child != that.num_child)
        return false;
    }

    boolean this_present_aggregate_function = true && this.isSetAggregate_function();
    boolean that_present_aggregate_function = true && that.isSetAggregate_function();
    if (this_present_aggregate_function || that_present_aggregate_function) {
      if (!(this_present_aggregate_function && that_present_aggregate_function))
        return false;
      if (!this.aggregate_function.equals(that.aggregate_function))
        return false;
    }

    boolean this_present_default_value = true && this.isSetDefault_value();
    boolean that_present_default_value = true && that.isSetDefault_value();
    if (this_present_default_value || that_present_default_value) {
      if (!(this_present_default_value && that_present_default_value))
        return false;
      if (!this.default_value.equals(that.default_value))
        return false;
    }

    boolean this_present_columnProperties = true && this.isSetColumnProperties();
    boolean that_present_columnProperties = true && that.isSetColumnProperties();
    if (this_present_columnProperties || that_present_columnProperties) {
      if (!(this_present_columnProperties && that_present_columnProperties))
        return false;
      if (!this.columnProperties.equals(that.columnProperties))
        return false;
    }

    boolean this_present_invisible = true && this.isSetInvisible();
    boolean that_present_invisible = true && that.isSetInvisible();
    if (this_present_invisible || that_present_invisible) {
      if (!(this_present_invisible && that_present_invisible))
        return false;
      if (this.invisible != that.invisible)
        return false;
    }

    boolean this_present_columnReferenceId = true && this.isSetColumnReferenceId();
    boolean that_present_columnReferenceId = true && that.isSetColumnReferenceId();
    if (this_present_columnReferenceId || that_present_columnReferenceId) {
      if (!(this_present_columnReferenceId && that_present_columnReferenceId))
        return false;
      if (!this.columnReferenceId.equals(that.columnReferenceId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_data_type = true && (isSetData_type());
    list.add(present_data_type);
    if (present_data_type)
      list.add(data_type.getValue());

    boolean present_column_name = true && (isSetColumn_name());
    list.add(present_column_name);
    if (present_column_name)
      list.add(column_name);

    boolean present_column_id = true && (isSetColumn_id());
    list.add(present_column_id);
    if (present_column_id)
      list.add(column_id);

    boolean present_columnar = true;
    list.add(present_columnar);
    if (present_columnar)
      list.add(columnar);

    boolean present_encoders = true && (isSetEncoders());
    list.add(present_encoders);
    if (present_encoders)
      list.add(encoders);

    boolean present_dimension = true;
    list.add(present_dimension);
    if (present_dimension)
      list.add(dimension);

    boolean present_column_group_id = true && (isSetColumn_group_id());
    list.add(present_column_group_id);
    if (present_column_group_id)
      list.add(column_group_id);

    boolean present_scale = true && (isSetScale());
    list.add(present_scale);
    if (present_scale)
      list.add(scale);

    boolean present_precision = true && (isSetPrecision());
    list.add(present_precision);
    if (present_precision)
      list.add(precision);

    boolean present_num_child = true && (isSetNum_child());
    list.add(present_num_child);
    if (present_num_child)
      list.add(num_child);

    boolean present_aggregate_function = true && (isSetAggregate_function());
    list.add(present_aggregate_function);
    if (present_aggregate_function)
      list.add(aggregate_function);

    boolean present_default_value = true && (isSetDefault_value());
    list.add(present_default_value);
    if (present_default_value)
      list.add(default_value);

    boolean present_columnProperties = true && (isSetColumnProperties());
    list.add(present_columnProperties);
    if (present_columnProperties)
      list.add(columnProperties);

    boolean present_invisible = true && (isSetInvisible());
    list.add(present_invisible);
    if (present_invisible)
      list.add(invisible);

    boolean present_columnReferenceId = true && (isSetColumnReferenceId());
    list.add(present_columnReferenceId);
    if (present_columnReferenceId)
      list.add(columnReferenceId);

    return list.hashCode();
  }

  @Override
  public int compareTo(ColumnSchema other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetData_type()).compareTo(other.isSetData_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_type, other.data_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_name()).compareTo(other.isSetColumn_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_name, other.column_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_id()).compareTo(other.isSetColumn_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_id, other.column_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnar()).compareTo(other.isSetColumnar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnar, other.columnar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEncoders()).compareTo(other.isSetEncoders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncoders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encoders, other.encoders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDimension()).compareTo(other.isSetDimension());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDimension()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dimension, other.dimension);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_group_id()).compareTo(other.isSetColumn_group_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_group_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_group_id, other.column_group_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScale()).compareTo(other.isSetScale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scale, other.scale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrecision()).compareTo(other.isSetPrecision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrecision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.precision, other.precision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_child()).compareTo(other.isSetNum_child());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_child()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_child, other.num_child);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggregate_function()).compareTo(other.isSetAggregate_function());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregate_function()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregate_function, other.aggregate_function);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefault_value()).compareTo(other.isSetDefault_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefault_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_value, other.default_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnProperties()).compareTo(other.isSetColumnProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnProperties, other.columnProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvisible()).compareTo(other.isSetInvisible());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvisible()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invisible, other.invisible);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnReferenceId()).compareTo(other.isSetColumnReferenceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnReferenceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnReferenceId, other.columnReferenceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ColumnSchema(");
    boolean first = true;

    sb.append("data_type:");
    if (this.data_type == null) {
      sb.append("null");
    } else {
      sb.append(this.data_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("column_name:");
    if (this.column_name == null) {
      sb.append("null");
    } else {
      sb.append(this.column_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("column_id:");
    if (this.column_id == null) {
      sb.append("null");
    } else {
      sb.append(this.column_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnar:");
    sb.append(this.columnar);
    first = false;
    if (!first) sb.append(", ");
    sb.append("encoders:");
    if (this.encoders == null) {
      sb.append("null");
    } else {
      sb.append(this.encoders);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dimension:");
    sb.append(this.dimension);
    first = false;
    if (isSetColumn_group_id()) {
      if (!first) sb.append(", ");
      sb.append("column_group_id:");
      sb.append(this.column_group_id);
      first = false;
    }
    if (isSetScale()) {
      if (!first) sb.append(", ");
      sb.append("scale:");
      sb.append(this.scale);
      first = false;
    }
    if (isSetPrecision()) {
      if (!first) sb.append(", ");
      sb.append("precision:");
      sb.append(this.precision);
      first = false;
    }
    if (isSetNum_child()) {
      if (!first) sb.append(", ");
      sb.append("num_child:");
      sb.append(this.num_child);
      first = false;
    }
    if (isSetAggregate_function()) {
      if (!first) sb.append(", ");
      sb.append("aggregate_function:");
      if (this.aggregate_function == null) {
        sb.append("null");
      } else {
        sb.append(this.aggregate_function);
      }
      first = false;
    }
    if (isSetDefault_value()) {
      if (!first) sb.append(", ");
      sb.append("default_value:");
      if (this.default_value == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.default_value, sb);
      }
      first = false;
    }
    if (isSetColumnProperties()) {
      if (!first) sb.append(", ");
      sb.append("columnProperties:");
      if (this.columnProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.columnProperties);
      }
      first = false;
    }
    if (isSetInvisible()) {
      if (!first) sb.append(", ");
      sb.append("invisible:");
      sb.append(this.invisible);
      first = false;
    }
    if (isSetColumnReferenceId()) {
      if (!first) sb.append(", ");
      sb.append("columnReferenceId:");
      if (this.columnReferenceId == null) {
        sb.append("null");
      } else {
        sb.append(this.columnReferenceId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (data_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'data_type' was not present! Struct: " + toString());
    }
    if (column_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_name' was not present! Struct: " + toString());
    }
    if (column_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_id' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'columnar' because it's a primitive and you chose the non-beans generator.
    if (encoders == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'encoders' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'dimension' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ColumnSchemaStandardSchemeFactory implements SchemeFactory {
    public ColumnSchemaStandardScheme getScheme() {
      return new ColumnSchemaStandardScheme();
    }
  }

  private static class ColumnSchemaStandardScheme extends StandardScheme<ColumnSchema> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ColumnSchema struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.data_type = org.apache.carbondata.format.DataType.findByValue(iprot.readI32());
              struct.setData_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_name = iprot.readString();
              struct.setColumn_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_id = iprot.readString();
              struct.setColumn_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLUMNAR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.columnar = iprot.readBool();
              struct.setColumnarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENCODERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.encoders = new ArrayList<Encoding>(_list0.size);
                Encoding _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = org.apache.carbondata.format.Encoding.findByValue(iprot.readI32());
                  struct.encoders.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setEncodersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DIMENSION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.dimension = iprot.readBool();
              struct.setDimensionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COLUMN_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.column_group_id = iprot.readI32();
              struct.setColumn_group_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scale = iprot.readI32();
              struct.setScaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRECISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.precision = iprot.readI32();
              struct.setPrecisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NUM_CHILD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_child = iprot.readI32();
              struct.setNum_childIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AGGREGATE_FUNCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aggregate_function = iprot.readString();
              struct.setAggregate_functionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DEFAULT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.default_value = iprot.readBinary();
              struct.setDefault_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COLUMN_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.columnProperties = new HashMap<String,String>(2*_map3.size);
                String _key4;
                String _val5;
                for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                {
                  _key4 = iprot.readString();
                  _val5 = iprot.readString();
                  struct.columnProperties.put(_key4, _val5);
                }
                iprot.readMapEnd();
              }
              struct.setColumnPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // INVISIBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.invisible = iprot.readBool();
              struct.setInvisibleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COLUMN_REFERENCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnReferenceId = iprot.readString();
              struct.setColumnReferenceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetColumnar()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnar' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDimension()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dimension' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ColumnSchema struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.data_type != null) {
        oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
        oprot.writeI32(struct.data_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.column_name != null) {
        oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
        oprot.writeString(struct.column_name);
        oprot.writeFieldEnd();
      }
      if (struct.column_id != null) {
        oprot.writeFieldBegin(COLUMN_ID_FIELD_DESC);
        oprot.writeString(struct.column_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COLUMNAR_FIELD_DESC);
      oprot.writeBool(struct.columnar);
      oprot.writeFieldEnd();
      if (struct.encoders != null) {
        oprot.writeFieldBegin(ENCODERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.encoders.size()));
          for (Encoding _iter7 : struct.encoders)
          {
            oprot.writeI32(_iter7.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DIMENSION_FIELD_DESC);
      oprot.writeBool(struct.dimension);
      oprot.writeFieldEnd();
      if (struct.isSetColumn_group_id()) {
        oprot.writeFieldBegin(COLUMN_GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.column_group_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetScale()) {
        oprot.writeFieldBegin(SCALE_FIELD_DESC);
        oprot.writeI32(struct.scale);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrecision()) {
        oprot.writeFieldBegin(PRECISION_FIELD_DESC);
        oprot.writeI32(struct.precision);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_child()) {
        oprot.writeFieldBegin(NUM_CHILD_FIELD_DESC);
        oprot.writeI32(struct.num_child);
        oprot.writeFieldEnd();
      }
      if (struct.aggregate_function != null) {
        if (struct.isSetAggregate_function()) {
          oprot.writeFieldBegin(AGGREGATE_FUNCTION_FIELD_DESC);
          oprot.writeString(struct.aggregate_function);
          oprot.writeFieldEnd();
        }
      }
      if (struct.default_value != null) {
        if (struct.isSetDefault_value()) {
          oprot.writeFieldBegin(DEFAULT_VALUE_FIELD_DESC);
          oprot.writeBinary(struct.default_value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columnProperties != null) {
        if (struct.isSetColumnProperties()) {
          oprot.writeFieldBegin(COLUMN_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.columnProperties.size()));
            for (Map.Entry<String, String> _iter8 : struct.columnProperties.entrySet())
            {
              oprot.writeString(_iter8.getKey());
              oprot.writeString(_iter8.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInvisible()) {
        oprot.writeFieldBegin(INVISIBLE_FIELD_DESC);
        oprot.writeBool(struct.invisible);
        oprot.writeFieldEnd();
      }
      if (struct.columnReferenceId != null) {
        if (struct.isSetColumnReferenceId()) {
          oprot.writeFieldBegin(COLUMN_REFERENCE_ID_FIELD_DESC);
          oprot.writeString(struct.columnReferenceId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ColumnSchemaTupleSchemeFactory implements SchemeFactory {
    public ColumnSchemaTupleScheme getScheme() {
      return new ColumnSchemaTupleScheme();
    }
  }

  private static class ColumnSchemaTupleScheme extends TupleScheme<ColumnSchema> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ColumnSchema struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.data_type.getValue());
      oprot.writeString(struct.column_name);
      oprot.writeString(struct.column_id);
      oprot.writeBool(struct.columnar);
      {
        oprot.writeI32(struct.encoders.size());
        for (Encoding _iter9 : struct.encoders)
        {
          oprot.writeI32(_iter9.getValue());
        }
      }
      oprot.writeBool(struct.dimension);
      BitSet optionals = new BitSet();
      if (struct.isSetColumn_group_id()) {
        optionals.set(0);
      }
      if (struct.isSetScale()) {
        optionals.set(1);
      }
      if (struct.isSetPrecision()) {
        optionals.set(2);
      }
      if (struct.isSetNum_child()) {
        optionals.set(3);
      }
      if (struct.isSetAggregate_function()) {
        optionals.set(4);
      }
      if (struct.isSetDefault_value()) {
        optionals.set(5);
      }
      if (struct.isSetColumnProperties()) {
        optionals.set(6);
      }
      if (struct.isSetInvisible()) {
        optionals.set(7);
      }
      if (struct.isSetColumnReferenceId()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetColumn_group_id()) {
        oprot.writeI32(struct.column_group_id);
      }
      if (struct.isSetScale()) {
        oprot.writeI32(struct.scale);
      }
      if (struct.isSetPrecision()) {
        oprot.writeI32(struct.precision);
      }
      if (struct.isSetNum_child()) {
        oprot.writeI32(struct.num_child);
      }
      if (struct.isSetAggregate_function()) {
        oprot.writeString(struct.aggregate_function);
      }
      if (struct.isSetDefault_value()) {
        oprot.writeBinary(struct.default_value);
      }
      if (struct.isSetColumnProperties()) {
        {
          oprot.writeI32(struct.columnProperties.size());
          for (Map.Entry<String, String> _iter10 : struct.columnProperties.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            oprot.writeString(_iter10.getValue());
          }
        }
      }
      if (struct.isSetInvisible()) {
        oprot.writeBool(struct.invisible);
      }
      if (struct.isSetColumnReferenceId()) {
        oprot.writeString(struct.columnReferenceId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ColumnSchema struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.data_type = org.apache.carbondata.format.DataType.findByValue(iprot.readI32());
      struct.setData_typeIsSet(true);
      struct.column_name = iprot.readString();
      struct.setColumn_nameIsSet(true);
      struct.column_id = iprot.readString();
      struct.setColumn_idIsSet(true);
      struct.columnar = iprot.readBool();
      struct.setColumnarIsSet(true);
      {
        org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.encoders = new ArrayList<Encoding>(_list11.size);
        Encoding _elem12;
        for (int _i13 = 0; _i13 < _list11.size; ++_i13)
        {
          _elem12 = org.apache.carbondata.format.Encoding.findByValue(iprot.readI32());
          struct.encoders.add(_elem12);
        }
      }
      struct.setEncodersIsSet(true);
      struct.dimension = iprot.readBool();
      struct.setDimensionIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.column_group_id = iprot.readI32();
        struct.setColumn_group_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.scale = iprot.readI32();
        struct.setScaleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.precision = iprot.readI32();
        struct.setPrecisionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.num_child = iprot.readI32();
        struct.setNum_childIsSet(true);
      }
      if (incoming.get(4)) {
        struct.aggregate_function = iprot.readString();
        struct.setAggregate_functionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.default_value = iprot.readBinary();
        struct.setDefault_valueIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.columnProperties = new HashMap<String,String>(2*_map14.size);
          String _key15;
          String _val16;
          for (int _i17 = 0; _i17 < _map14.size; ++_i17)
          {
            _key15 = iprot.readString();
            _val16 = iprot.readString();
            struct.columnProperties.put(_key15, _val16);
          }
        }
        struct.setColumnPropertiesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.invisible = iprot.readBool();
        struct.setInvisibleIsSet(true);
      }
      if (incoming.get(8)) {
        struct.columnReferenceId = iprot.readString();
        struct.setColumnReferenceIdIsSet(true);
      }
    }
  }

}

