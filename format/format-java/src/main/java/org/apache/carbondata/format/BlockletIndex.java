/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.carbondata.format;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Index of one blocklet
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class BlockletIndex implements org.apache.thrift.TBase<BlockletIndex, BlockletIndex._Fields>, java.io.Serializable, Cloneable, Comparable<BlockletIndex> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlockletIndex");

  private static final org.apache.thrift.protocol.TField MIN_MAX_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("min_max_index", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField B_TREE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("b_tree_index", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BlockletIndexStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BlockletIndexTupleSchemeFactory());
  }

  public BlockletMinMaxIndex min_max_index; // optional
  public BlockletBTreeIndex b_tree_index; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MIN_MAX_INDEX((short)1, "min_max_index"),
    B_TREE_INDEX((short)2, "b_tree_index");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MIN_MAX_INDEX
          return MIN_MAX_INDEX;
        case 2: // B_TREE_INDEX
          return B_TREE_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.MIN_MAX_INDEX,_Fields.B_TREE_INDEX};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MIN_MAX_INDEX, new org.apache.thrift.meta_data.FieldMetaData("min_max_index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BlockletMinMaxIndex.class)));
    tmpMap.put(_Fields.B_TREE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("b_tree_index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BlockletBTreeIndex.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlockletIndex.class, metaDataMap);
  }

  public BlockletIndex() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlockletIndex(BlockletIndex other) {
    if (other.isSetMin_max_index()) {
      this.min_max_index = new BlockletMinMaxIndex(other.min_max_index);
    }
    if (other.isSetB_tree_index()) {
      this.b_tree_index = new BlockletBTreeIndex(other.b_tree_index);
    }
  }

  public BlockletIndex deepCopy() {
    return new BlockletIndex(this);
  }

  @Override
  public void clear() {
    this.min_max_index = null;
    this.b_tree_index = null;
  }

  public BlockletMinMaxIndex getMin_max_index() {
    return this.min_max_index;
  }

  public BlockletIndex setMin_max_index(BlockletMinMaxIndex min_max_index) {
    this.min_max_index = min_max_index;
    return this;
  }

  public void unsetMin_max_index() {
    this.min_max_index = null;
  }

  /** Returns true if field min_max_index is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_max_index() {
    return this.min_max_index != null;
  }

  public void setMin_max_indexIsSet(boolean value) {
    if (!value) {
      this.min_max_index = null;
    }
  }

  public BlockletBTreeIndex getB_tree_index() {
    return this.b_tree_index;
  }

  public BlockletIndex setB_tree_index(BlockletBTreeIndex b_tree_index) {
    this.b_tree_index = b_tree_index;
    return this;
  }

  public void unsetB_tree_index() {
    this.b_tree_index = null;
  }

  /** Returns true if field b_tree_index is set (has been assigned a value) and false otherwise */
  public boolean isSetB_tree_index() {
    return this.b_tree_index != null;
  }

  public void setB_tree_indexIsSet(boolean value) {
    if (!value) {
      this.b_tree_index = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MIN_MAX_INDEX:
      if (value == null) {
        unsetMin_max_index();
      } else {
        setMin_max_index((BlockletMinMaxIndex)value);
      }
      break;

    case B_TREE_INDEX:
      if (value == null) {
        unsetB_tree_index();
      } else {
        setB_tree_index((BlockletBTreeIndex)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MIN_MAX_INDEX:
      return getMin_max_index();

    case B_TREE_INDEX:
      return getB_tree_index();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MIN_MAX_INDEX:
      return isSetMin_max_index();
    case B_TREE_INDEX:
      return isSetB_tree_index();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlockletIndex)
      return this.equals((BlockletIndex)that);
    return false;
  }

  public boolean equals(BlockletIndex that) {
    if (that == null)
      return false;

    boolean this_present_min_max_index = true && this.isSetMin_max_index();
    boolean that_present_min_max_index = true && that.isSetMin_max_index();
    if (this_present_min_max_index || that_present_min_max_index) {
      if (!(this_present_min_max_index && that_present_min_max_index))
        return false;
      if (!this.min_max_index.equals(that.min_max_index))
        return false;
    }

    boolean this_present_b_tree_index = true && this.isSetB_tree_index();
    boolean that_present_b_tree_index = true && that.isSetB_tree_index();
    if (this_present_b_tree_index || that_present_b_tree_index) {
      if (!(this_present_b_tree_index && that_present_b_tree_index))
        return false;
      if (!this.b_tree_index.equals(that.b_tree_index))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_min_max_index = true && (isSetMin_max_index());
    list.add(present_min_max_index);
    if (present_min_max_index)
      list.add(min_max_index);

    boolean present_b_tree_index = true && (isSetB_tree_index());
    list.add(present_b_tree_index);
    if (present_b_tree_index)
      list.add(b_tree_index);

    return list.hashCode();
  }

  @Override
  public int compareTo(BlockletIndex other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMin_max_index()).compareTo(other.isSetMin_max_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_max_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_max_index, other.min_max_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB_tree_index()).compareTo(other.isSetB_tree_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB_tree_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b_tree_index, other.b_tree_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlockletIndex(");
    boolean first = true;

    if (isSetMin_max_index()) {
      sb.append("min_max_index:");
      if (this.min_max_index == null) {
        sb.append("null");
      } else {
        sb.append(this.min_max_index);
      }
      first = false;
    }
    if (isSetB_tree_index()) {
      if (!first) sb.append(", ");
      sb.append("b_tree_index:");
      if (this.b_tree_index == null) {
        sb.append("null");
      } else {
        sb.append(this.b_tree_index);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (min_max_index != null) {
      min_max_index.validate();
    }
    if (b_tree_index != null) {
      b_tree_index.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BlockletIndexStandardSchemeFactory implements SchemeFactory {
    public BlockletIndexStandardScheme getScheme() {
      return new BlockletIndexStandardScheme();
    }
  }

  private static class BlockletIndexStandardScheme extends StandardScheme<BlockletIndex> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BlockletIndex struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MIN_MAX_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.min_max_index = new BlockletMinMaxIndex();
              struct.min_max_index.read(iprot);
              struct.setMin_max_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // B_TREE_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.b_tree_index = new BlockletBTreeIndex();
              struct.b_tree_index.read(iprot);
              struct.setB_tree_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BlockletIndex struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.min_max_index != null) {
        if (struct.isSetMin_max_index()) {
          oprot.writeFieldBegin(MIN_MAX_INDEX_FIELD_DESC);
          struct.min_max_index.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.b_tree_index != null) {
        if (struct.isSetB_tree_index()) {
          oprot.writeFieldBegin(B_TREE_INDEX_FIELD_DESC);
          struct.b_tree_index.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BlockletIndexTupleSchemeFactory implements SchemeFactory {
    public BlockletIndexTupleScheme getScheme() {
      return new BlockletIndexTupleScheme();
    }
  }

  private static class BlockletIndexTupleScheme extends TupleScheme<BlockletIndex> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BlockletIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMin_max_index()) {
        optionals.set(0);
      }
      if (struct.isSetB_tree_index()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMin_max_index()) {
        struct.min_max_index.write(oprot);
      }
      if (struct.isSetB_tree_index()) {
        struct.b_tree_index.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BlockletIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.min_max_index = new BlockletMinMaxIndex();
        struct.min_max_index.read(iprot);
        struct.setMin_max_indexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.b_tree_index = new BlockletBTreeIndex();
        struct.b_tree_index.read(iprot);
        struct.setB_tree_indexIsSet(true);
      }
    }
  }

}

